Program.Sub.ScreenSU.Start
Gui.F_ContactList..create
Gui.F_ContactList..caption("Email Purchase Order")
Gui.F_ContactList..size(7425,7305)
Gui.F_ContactList..minx(0)
Gui.F_ContactList..miny(0)
Gui.F_ContactList..position(0,0)
Gui.F_ContactList..event(UnLoad,f_contactlist_unload)
Gui.F_ContactList..forecolor(0)
Gui.F_ContactList..BackColor(-2147483633)
Gui.F_ContactList..mousepointer(0)
Gui.F_ContactList..sizeable(False)
Gui.F_ContactList.lstEmails.create(listbox)
Gui.F_ContactList.lstEmails.size(3660,900)
Gui.F_ContactList.lstEmails.position(120,600)
Gui.F_ContactList.lstEmails.tabstop(True)
Gui.F_ContactList.lstEmails.tabindex(4)
Gui.F_ContactList.txtEmail.create(textbox,"",False,3690,300,0,7860,1065,True,0,Arial,8,-2147483643,1)
Gui.F_ContactList.txtEmail.defaultvalue("")
Gui.F_ContactList.txtEmail.tabstop(True)
Gui.F_ContactList.txtEmail.tabindex(2)
Gui.F_ContactList.cmdAdd.create(button)
Gui.F_ContactList.cmdAdd.caption("Add")
Gui.F_ContactList.cmdAdd.visible(False)
Gui.F_ContactList.cmdAdd.size(840,375)
Gui.F_ContactList.cmdAdd.position(8010,1800)
Gui.F_ContactList.cmdAdd.event(Click,cmdadd_click)
Gui.F_ContactList.cmdAdd.defaultvalue("")
Gui.F_ContactList.cmdAdd.tabstop(True)
Gui.F_ContactList.cmdAdd.tabindex(3)
Gui.F_ContactList.cmdRemove.create(button)
Gui.F_ContactList.cmdRemove.caption("Remove")
Gui.F_ContactList.cmdRemove.visible(False)
Gui.F_ContactList.cmdRemove.size(810,375)
Gui.F_ContactList.cmdRemove.position(9555,1860)
Gui.F_ContactList.cmdRemove.event(Click,cmdremove_click)
Gui.F_ContactList.cmdRemove.defaultvalue("")
Gui.F_ContactList.cmdRemove.tabstop(True)
Gui.F_ContactList.cmdRemove.tabindex(5)
Gui.F_ContactList.lbl1.create(label,"Choose an existing contact",False,2565,255,1,8970,165,True,0,Arial,8,-2147483633,0)
Gui.F_ContactList.lbl1.defaultvalue("")
Gui.F_ContactList.lbl2.create(label,"Enter an email address",False,2850,255,1,8220,765,True,0,Arial,8,-2147483633,0)
Gui.F_ContactList.lbl2.defaultvalue("")
Gui.F_ContactList.cmdsave.create(button)
Gui.F_ContactList.cmdsave.caption("Save")
Gui.F_ContactList.cmdsave.size(855,360)
Gui.F_ContactList.cmdsave.position(105,6345)
Gui.F_ContactList.cmdsave.event(Click,cmdsave_Click)
Gui.F_ContactList.cmdsave.defaultvalue("")
Gui.F_ContactList.cmdsave.tabstop(True)
Gui.F_ContactList.cmdsave.tabindex(8)
Gui.F_ContactList.mltxtBody.create(textboxm)
Gui.F_ContactList.mltxtBody.size(6915,2775)
Gui.F_ContactList.mltxtBody.position(105,3450)
Gui.F_ContactList.mltxtBody.defaultvalue("")
Gui.F_ContactList.mltxtBody.tabstop(True)
Gui.F_ContactList.mltxtBody.tabindex(7)
Gui.F_ContactList.txtSubject.create(textbox,"",True,6930,300,0,90,2685,True,0,Arial,8,-2147483643,1)
Gui.F_ContactList.txtSubject.maxLength(72)
Gui.F_ContactList.txtSubject.defaultvalue("")
Gui.F_ContactList.txtSubject.tabstop(True)
Gui.F_ContactList.txtSubject.tabindex(6)
Gui.F_ContactList.lbl3.create(label,"Subject",True,1935,255,1,105,2445,True,0,Arial,8,-2147483633,0)
Gui.F_ContactList.lbl3.defaultvalue("")
Gui.F_ContactList.lbl4.create(label,"Body",True,1935,255,1,105,3135,True,0,Arial,8,-2147483633,0)
Gui.F_ContactList.lbl4.defaultvalue("")
Gui.F_ContactList.lbl5.create(label,"Recipients",True,1935,255,1,165,285,True,0,Arial,8,-2147483633,0)
Gui.F_ContactList.lbl5.defaultvalue("")
Gui.F_ContactList.lbl6.create(label,"Reply To Email Address",True,1935,255,1,105,1680,True,0,Arial,8,-2147483633,0)
Gui.F_ContactList.lbl6.defaultvalue("")
Gui.F_ContactList.txtReplyEmail.create(textbox,"",True,3690,300,0,105,1980,True,0,Arial,8,-2147483643,1)
Gui.F_ContactList.txtReplyEmail.defaultvalue("")
Gui.F_ContactList.ddlContact.create(dropdownlist)
Gui.F_ContactList.ddlContact.visible(False)
Gui.F_ContactList.ddlContact.size(3690,330)
Gui.F_ContactList.ddlContact.position(10155,495)
Gui.F_ContactList.ddlContact.event(Click,ddlcontact_click)
Gui.F_ContactList.ddlContact.defaultvalue("")
Gui.Form2..create
Gui.Form2..caption("Notification Selection")
Gui.Form2..size(7440,4875)
Gui.Form2..minx(0)
Gui.Form2..miny(0)
Gui.Form2..position(0,0)
Gui.Form2..event(UnLoad,form2_unload)
Gui.Form2..forecolor(0)
Gui.Form2..BackColor(-2147483633)
Gui.Form2..maxbutton(False)
Gui.Form2..minbutton(False)
Gui.Form2..mousepointer(0)
Gui.Form2..moveable(False)
Gui.Form2..sizeable(False)
Gui.Form2.chkAll.create(checkbox)
Gui.Form2.chkAll.caption("Select All Above")
Gui.Form2.chkAll.size(1935,255)
Gui.Form2.chkAll.position(200,3235)
Gui.Form2.chkAll.event(Click,chkall_click)
Gui.Form2.chkAll.defaultvalue("")
Gui.Form2.cmdSend.create(button)
Gui.Form2.cmdSend.caption("Send")
Gui.Form2.cmdSend.size(855,375)
Gui.Form2.cmdSend.position(195,3735)
Gui.Form2.cmdSend.event(Click,cmdSend_Click)
Gui.Form2.cmdSend.defaultvalue("")
Gui.Form2.gsflexgrid1.create(gsflexgrid)
Gui.Form2.gsflexgrid1.size(6825,2880)
Gui.Form2.gsflexgrid1.position(195,195)
Gui.Form2.gsflexgrid1.Event(CommandClick,gsflexgrid1_CommandClick)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
Variable.Global.sCompID.Declare(String)
Variable.Global.sCompName.Declare(String)
Variable.Global.sTranNum.Declare(String)
Variable.Global.sFullTranNum.Declare(String)
Variable.Global.bBal.Declare(Boolean,False)
Variable.Global.sAcctNum.Declare(String)
Variable.Global.sImmDestTran.Declare(String)
Variable.Global.sImmDest.Declare(String)
Variable.Global.sImmOri.Declare(String)
Variable.Global.sImmOriTran.Declare(String)
Variable.UDT.uPayments.Define("Vendor_ID",String)
Variable.UDT.uPayments.Define("Vendor_Name",String)
Variable.UDT.uPayments.Define("Batch_Num",String)
Variable.UDT.uPayments.Define("Check_Date",Date)
Variable.UDT.uPayments.Define("Check_Amt",Float)
Variable.UDT.uPayments.Define("Invoice",String)
Variable.uGlobal.uPayments.Declare("uPayments")
Variable.UDT.uVendor.Define("Invoices",String)
Variable.UDT.uVendor.Define("Pay_Amount",Float)
Variable.UDT.uVendor.Define("KEYNUM",String)
Variable.UDT.uVendor.Define("Vendor_ID",String)
Variable.UDT.uVendor.Define("Vendor_Name",String,Vendor_Name)
Variable.uGlobal.uVendor.Declare("uVendor")
Variable.Global.sVendorID.Declare(String)
Variable.Global.bBusy.Declare(Boolean,False)
Variable.Global.sList.Declare(String)
Variable.Global.sImmOriTranTrim.Declare(String)
Variable.Global.uCheckNo.Declare(String)
Variable.Global.uCheckAmount.Declare(String)
Variable.Global.Iinvoicecount3.Declare(Long,0)
Variable.Global.uPayAmount.Declare(String)
Variable.UDT.uRecip.Define("VENDOR_ID",String)
Variable.UDT.uRecip.Define("RECIP",String)
Variable.UDT.uRecip.Define("EMAIL",String)
Variable.uGlobal.uRecip.Declare("uRecip")
Variable.UDT.uEmail.Define("SUBJECT",String)
Variable.UDT.uEmail.Define("BODY",String)
Variable.UDT.uEmail.Define("REPLY_EMAIL",String)
variable.UDT.uEmail.Define("VENDOR_ID",string)
Variable.Global.i.Declare(Long,0)
Variable.Global.sVendor.Declare(String)
Variable.Global.sNewList.Declare(String)

Variable.Global.sBody.Declare(String)
Variable.Global.sReplyEmail.Declare(String)
Variable.Global.sEmail.Declare(String)
Variable.Global.sSubject.Declare(String)
Variable.Global.sret.Declare(String)
Variable.Global.sret2.Declare(String)
Variable.Global.iCounter.Declare(Long,0)
Variable.uGlobal.uEmail.Declare("uEmail")
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.ODBC.Connection!con.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)
V.uGlobal.uPayments.Redim(-1,-1)
V.uGlobal.uVendor.Redim(-1,-1)

V.Local.ssample.Declare(String)
V.Local.i.Declare(Long)

V.uGlobal.uVendor.Redim(0,0)

F.Intrinsic.Control.CallSub(Opchk)


Program.Sub.Main.End

Program.Sub.Unload.Start
F.ODBC.Connection!con.Close
F.Intrinsic.Control.End

Program.Sub.Unload.End

Program.Sub.OpChk.Start
F.Intrinsic.Control.SetErrorHandler("OpChk_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSql.Declare(String)
V.Local.byteArray.Declare(ByteArray)

'First checking for ACH records to actually export
V.Local.sSql.Set("Select * from V_ACH_PAYMENT where EXPORTED = ''")
F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSql)
F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
	F.ODBC.con!rst.Close
	F.Intrinsic.UI.Msgbox("No ACH records found!","No Records")
	F.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.Else
	F.ODBC.con!rst.Close

	'Checking to see if the Balanced in the Company Options whas selected or not
	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","Select * from OP_HEADER where ID = '400026' and SEQUENCE = '0007'")
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
		F.ODBC.con!rst.Close
		F.Intrinsic.UI.Msgbox("Balancing option not selected.  Please update ACH Options.","Option Error")
		F.Intrinsic.Control.CallSub(Unload)
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.If(V.ODBC.Con!rst.FieldValLong!F_BOOLEAN,=,1)
			V.Global.bBal.Set(False)
		F.Intrinsic.Control.Else
			V.Global.bBal.Set(True)
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rst.Close
	F.Intrinsic.Control.EndIf

	'Getting ACH Company ID from Company Options
	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","Select * from OP_HEADER where ID = '400026' and SEQUENCE = '0006'")
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
		F.ODBC.con!rst.Close
		F.Intrinsic.UI.Msgbox("ACH Company ID not entered.  Please update ACH Options.","Option Error")
		F.Intrinsic.Control.CallSub(Unload)
	F.Intrinsic.Control.Else
		V.Global.sCompID.Set(V.ODBC.con!rst.FieldValTrim!TEXT1)
		F.ODBC.Con!rst.Close
	F.Intrinsic.Control.EndIf

	'Getting Company Name from Company Options
	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","Select * from OP_HEADER where ID = '400026' and SEQUENCE = '0004'")
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
		F.ODBC.con!rst.Close
		F.Intrinsic.UI.Msgbox("Company Name not entered.  Please update ACH Options.","Option Error")
		F.Intrinsic.Control.CallSub(Unload)
	F.Intrinsic.Control.Else
		V.Global.sCompName.Set(V.ODBC.con!rst.FieldValTrim!TEXT1)
		F.ODBC.Con!rst.Close
	F.Intrinsic.Control.EndIf

	'Getting bank transit number
	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","Select * from OP_HEADER where ID = '400026' and SEQUENCE = '0002'")
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
		F.ODBC.con!rst.Close
		F.Intrinsic.UI.Msgbox("Bank Transit Number not entered.  Please update ACH Options.","Option Error")
		F.Intrinsic.Control.CallSub(Unload)
	F.Intrinsic.Control.Else
		V.Global.sTranNum.Set(V.ODBC.con!rst.FieldValTrim!TEXT1)
		F.Intrinsic.String.Left(V.Global.sTranNum,8,V.Global.sTranNum)
		V.Global.sFullTranNum.Set(V.ODBC.con!rst.FieldValTrim!TEXT1)
		F.ODBC.Con!rst.Close
	F.Intrinsic.Control.EndIf

	'Getting bank account number
	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","Select * from OP_HEADER where ID = '400026' and SEQUENCE = '0008'")
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
		F.ODBC.con!rst.Close
		F.Intrinsic.UI.Msgbox("Bank Account Number not entered.  Please update ACH Options.","Option Error")
		F.Intrinsic.Control.CallSub(Unload)
	F.Intrinsic.Control.Else
		'Replacing to decrypt acct number BM 12/22/20
		'V.Global.sAcctNum.Set(V.ODBC.con!rst.FieldValTrim!TEXT1)
		F.Intrinsic.String.ConvertString2BA(V.ODBC.con!rst.FieldValTrim!TEXT1,V.Local.byteArray)
		F.Global.Encryption.Decrypt(V.Local.byteArray,V.Global.sAcctNum)
		F.ODBC.Con!rst.Close
	F.Intrinsic.Control.EndIf

	'Getting immediate destination name and number
	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","Select * from OP_HEADER where ID = '400803' and SEQUENCE = '0001'")
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
		F.ODBC.con!rst.Close
		F.Intrinsic.UI.Msgbox("Immediate Destination Name not entered.  Please update ACH Options.","Option Error")
		F.Intrinsic.Control.CallSub(Unload)
	F.Intrinsic.Control.Else
		V.Global.sImmDest.Set(V.ODBC.con!rst.FieldValTrim!TEXT1)
		F.ODBC.con!rst.Close
	F.Intrinsic.Control.EndIf
	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","Select * from OP_HEADER where ID = '400803' and SEQUENCE = '0002'")
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
		F.ODBC.con!rst.Close
		F.Intrinsic.UI.Msgbox("Immediate Destination Transit Number not entered.  Please update ACH Options.","Option Error")
		F.Intrinsic.Control.CallSub(Unload)
	F.Intrinsic.Control.Else
		V.Global.sImmDestTran.Set(V.ODBC.con!rst.FieldValTrim!TEXT1)
		F.ODBC.con!rst.Close
	F.Intrinsic.Control.EndIf

	'Getting immediate origin name and number
	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","Select * from OP_HEADER where ID = '400803' and SEQUENCE = '0003'")
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
		F.ODBC.con!rst.Close
		F.Intrinsic.UI.Msgbox("Immediate Origin Name not entered.  Please update ACH Options.","Option Error")
		F.Intrinsic.Control.CallSub(Unload)
	F.Intrinsic.Control.Else
		V.Global.sImmOri.Set(V.ODBC.con!rst.FieldValTrim!TEXT1)
		F.ODBC.con!rst.Close
	F.Intrinsic.Control.EndIf
	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","Select * from OP_HEADER where ID = '400803' and SEQUENCE = '0004'")
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
		F.ODBC.con!rst.Close
		F.Intrinsic.UI.Msgbox("Immediate Origin Transit Number not entered.  Please update ACH Options.","Option Error")
		F.Intrinsic.Control.CallSub(Unload)
	F.Intrinsic.Control.Else
		V.Global.sImmOriTran.Set(V.ODBC.con!rst.FieldValTrim!TEXT1)
		V.Global.sImmOriTranTrim.Set(V.ODBC.con!rst.FieldValTrim!TEXT1)
		F.Intrinsic.String.Left(V.Global.sImmOriTranTrim,8,V.Global.sImmOriTranTrim)
		F.ODBC.con!rst.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.CallSub(Buildfile)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("OpChk_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf
Program.Sub.OpChk.End

Program.Sub.BuildFile.Start
F.Intrinsic.Control.SetErrorHandler("BuildFile_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSql.Declare(String)
V.Local.sTransCode.Declare(String)
V.Local.sRcvTranNum.Declare(String)
V.Local.sChkAmt.Declare(String)
V.Local.sTotalAmt.Declare(String)
V.Local.sBalAmt.Declare(String)
V.Local.fTotalAmt.Declare(Float)
V.Local.sPosValues.Declare(String)
V.Local.sPosDetailLen.Declare(String)
V.Local.sPosBatchTrlLen.Declare(String)
V.Local.sPosBatchHdrLen.Declare(String)
V.Local.sPosFileTrlLen.Declare(String)
V.Local.sPosFileHdrLen.Declare(String)
V.Local.sDetail.Declare(String)
V.Local.sBatchTrl.Declare(String)
V.Local.sBatchHdr.Declare(String)
V.Local.sFileTrl.Declare(String)
V.Local.sFileHdr.Declare(String)
V.Local.sFileWrite.Declare(String)
V.Local.iTraceNum.Declare(Long)
V.Local.sTraceNum.Declare(String)
V.Local.iHash.Declare(Long)
V.Local.sHash.Declare(String)
V.Local.sCompName.Declare(String)
V.Local.iBatchNum.Declare(Long)
V.Local.sBatchNum.Declare(String)
V.Local.iAddendaCnt.Declare(Long)
V.Local.sAddendaCnt.Declare(String)
V.Local.sClass.Declare(String)
V.Local.iMonth.Declare(Long)
V.Local.iDay.Declare(Long)
V.Local.sEntryDesc.Declare(String)
V.Local.sEntryDate.Declare(String)
V.Local.iBlockCnt.Declare(Long)
V.Local.sBlockCnt.Declare(String)
V.Local.sTime.Declare(String)
V.Local.i.Declare(Long)
V.Local.iMod.Declare(Long)
V.Local.sFill.Declare(String)
V.Local.sTraceTran.Declare(String)
V.Local.sRet.Declare(String)
V.Local.iUB.Declare(Long)
V.Local.sVendAccount.Declare(String)
V.Local.sVendID.Declare(String)
V.Local.sVendName.Declare(String)
V.Local.sPosFileHdrAlign.Declare(String)
V.Local.sPosFileTrlAlign.Declare(String)
V.Local.sPosBatchHdrAlign.Declare(String)
V.Local.sPosBatchTrlAlign.Declare(String)
V.Local.sPosDetailAlign.Declare(String)
V.Local.sInvoiceList.Declare(String)
V.Local.byteArray.Declare(ByteArray)

'Setting lengths for record types
V.Local.sPosDetailLen.Set("1*!*2*!*8*!*1*!*17*!*10*!*15*!*22*!*2*!*1*!*15")
v.Local.iposdetaillen.Declare(long)
F.Intrinsic.String.Split(V.Local.sPosDetailLen,"*!*",V.Local.iPosDetailLen)

V.Local.sPosDetailAlign.Set("0*!*0*!*0*!*0*!*0*!*11*!*0*!*0*!*0*!*0*!*11")
v.Local.iposdetailalign.declare(long)
F.Intrinsic.String.Split(V.Local.sPosDetailAlign,"*!*",V.Local.iPosDetailAlign)

V.Local.sPosBatchTrlLen.Set("1*!*3*!*6*!*10*!*12*!*12*!*10*!*25*!*8*!*7")
v.Local.iposbatchtrllen.Declare(long)
F.Intrinsic.String.Split(V.Local.sPosBatchTrlLen,"*!*",V.Local.iPosBatchTrlLen)

V.Local.sPosBatchTrlAlign.Set("0*!*0*!*11*!*11*!*11*!*11*!*0*!*0*!*0*!*11")
v.Local.iposbatchtrlalign.Declare(long)
F.Intrinsic.String.Split(V.Local.sPosBatchTrlAlign,"*!*",V.Local.iPosBatchTrlAlign)

V.Local.sPosBatchHdrLen.Set("1*!*3*!*16*!*20*!*10*!*3*!*10*!*6*!*6*!*3*!*1*!*8*!*7")
v.Local.iposbatchhdrlen.Declare(long)
F.Intrinsic.String.Split(V.Local.sPosBatchHdrLen,"*!*",V.Local.iPosBatchHdrLen)

V.Local.sPosBatchHdrAlign.Set("0*!*0*!*0*!*0*!*0*!*0*!*0*!*0*!*0*!*0*!*0*!*0*!*11")
v.Local.iposbatchhdralign.Declare(long)
F.Intrinsic.String.Split(V.Local.sPosBatchHdrAlign,"*!*",V.Local.iPosBatchHdrAlign)

V.Local.sPosFileTrlLen.Set("1*!*6*!*6*!*8*!*10*!*12*!*12*!*39")
v.Local.iposfiletrllen.Declare(long)
F.Intrinsic.String.Split(V.Local.sPosFileTrlLen,"*!*",V.Local.iPosFileTrlLen)

V.Local.sPosFileTrlAlign.Set("0*!*0*!*0*!*11*!*11*!*11*!*11*!*0")
v.Local.iposfiletrlalign.Declare(long)
F.Intrinsic.String.Split(V.Local.sPosFileTrlAlign,"*!*",V.Local.iPosFileTrlAlign)

V.Local.sPosFileHdrLen.Set("1*!*2*!*10*!*10*!*6*!*4*!*1*!*3*!*2*!*1*!*23*!*23*!*8")
v.Local.iposfilehdrlen.Declare(long)
F.Intrinsic.String.Split(V.Local.sPosFileHdrLen,"*!*",V.Local.iPosFileHdrLen)

V.Local.sPosFileHdrAlign.Set("0*!*0*!*1*!*1*!*0*!*0*!*0*!*0*!*0*!*0*!*0*!*0*!*0")
v.Local.iposfilehdralign.Declare(long)
F.Intrinsic.String.Split(V.Local.sPosFileHdrAlign,"*!*",V.Local.iPosFileHdrAlign)

'Selecting distinct batch records from the ACH table where the records have not been exported yet
'Adding identical datatable for encrypted bank acct BM 12/29/20
V.Local.sSql.Set("Select * from ACH_PAYMENT where EXPORTED <> 'Y'")
F.ODBC.Connection!con.OpenLocalRecordsetRW("rst",V.Local.sSql)
V.Local.sSql.Set("Select BANK_ACCOUNT_ENC from ACH_PAYMENT where EXPORTED <> 'Y'")
F.Data.DataTable.CreateFromSQL("bankNum","con",V.Local.sSql)

F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,False)
	'Loop through the records for bulding the detail section of the file
	F.Intrinsic.Control.DoUntil(V.ODBC.con!rst.EOF,=,True)
		'Updating the exported flag on record to signal that it has been exported
		F.ODBC.con!rst.Set!EXPORTED("Y")
		F.ODBC.con!rst.Update

		'Getting transaction code
		F.Intrinsic.Control.If(V.ODBC.con!rst.FieldValTrim!BANK_ACCTYPE,=,"C")
			V.Local.sTransCode.Set("22")
		F.Intrinsic.Control.Else
			V.Local.sTransCode.Set("32")
		F.Intrinsic.Control.EndIf

		'Getting receiving transit number from record
		F.Intrinsic.String.Left(V.ODBC.con!rst.FieldValTrim!BANK_ROUTING,8,V.Local.sRcvTranNum)

		'Getting tran number to use for trace number
		F.Intrinsic.String.Left(V.Global.sTranNum,8,V.Local.sTraceTran)

		'Getting check digit from routing number
		F.Intrinsic.Control.CallSub(Chkdigit,"sTranNum",V.Local.sRcvTranNum)

		'Formatting check amount
		F.Intrinsic.String.Format(V.ODBC.con!rst.FieldValFloat!CHECK_AMT,"#.00",V.Local.sChkAmt)
		F.Intrinsic.String.Replace(V.Local.sChkAmt,".","",V.Local.sChkAmt)
		F.Intrinsic.String.LPad(V.Local.sChkAmt,0,10,V.Local.sChkAmt)

		'Creating trace number
		F.Intrinsic.Math.Add(V.Local.iTraceNum,1,V.Local.iTraceNum)
		F.Intrinsic.String.LPad(V.Local.iTraceNum,0,7,V.Local.sTraceNum)
		F.Intrinsic.String.Concat(V.Local.sTraceTran,V.Local.sTraceNum,V.Local.sTraceNum)
		
		'Formatting vendor ID and account number
		'Changed to reflect encryption/table changes 12/22 BM
		F.Global.Encryption.Decrypt(V.DataTable.bankNum(0).BANK_ACCOUNT_ENC!FieldVal,V.Local.sVendAccount)
		'F.Intrinsic.String.RPad(V.ODBC.con!rst.FieldValTrim!BANK_ACCOUNT," ",17,V.Local.sVendAccount)
		F.Intrinsic.String.RPad(V.Local.sVendAccount," ",17,V.Local.sVendAccount)
		F.Intrinsic.String.RPad(V.ODBC.con!rst.FieldValTrim!VENDOR_ID," ",15,V.Local.sVendID)
		F.Intrinsic.String.RPad(V.ODBC.con!rst.FieldValTrim!VENDOR_NAME," ",22,V.Local.sVendName)

		'Concatenating all values
		F.Intrinsic.String.Concat("6*!*",V.Local.sTransCode,"*!*",V.Local.sRcvTranNum,"*!*",V.Args.iChkDigit,"*!*",V.Local.sVendAccount,"*!*",V.Local.sChkAmt,"*!*",V.Local.sVendID,"*!*",V.Local.sVendName,"*!**!*0*!*",V.Local.sTraceNum,V.Local.sPosValues)
		F.Intrinsic.String.Split(V.Local.sPosValues,"*!*",V.Local.sPosValues)
		'added this to account for the string/long error when doing positionalstring with string value for sposdetaillen

		F.Intrinsic.String.PositionalString(V.Local.sPosValues,V.Local.iPosDetailLen,V.Local.iPosDetailAlign,V.Local.sDetail)
		'Starting to build file by concantenating all the detail records into string
		F.Intrinsic.Control.If(V.Local.sFileWrite,=,"")
			V.Local.sFileWrite.Set(V.Local.sDetail)
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Concat(V.Local.sFileWrite,V.Ambient.NewLine,V.Local.sDetail,V.Local.sFileWrite)
		F.Intrinsic.Control.EndIf

		'Total the check amount for the batch record
		F.Intrinsic.Math.Add(V.Local.fTotalAmt,V.ODBC.con!rst.FieldValFloat!CHECK_AMT,V.Local.fTotalAmt)

		'Totalling the transit numbers to be used to calculate the batch hash and file hash
		F.Intrinsic.Math.Add(V.Local.sRcvTranNum.Long,V.Local.iHash,V.Local.iHash)

		'Adding 1 to addenda count
		F.Intrinsic.Math.Add(V.Local.iAddendaCnt,1,V.Local.iAddendaCnt)

		'Adding 1 to block count
		F.Intrinsic.Math.Add(V.Local.iBlockCnt,1,V.Local.iBlockCnt)

		'Getting invoices from ACH invoice detail table
		V.Local.sInvoiceList.Set("")

		F.Intrinsic.String.Concat("Select INV_NO from ACH_DTL_INV where CHKNO = '",V.ODBC.con!rst.FieldValTrim!KEY_NUM,"'",V.Local.sSql)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstInvDtl",V.Local.sSql)
'
		F.Intrinsic.Control.DoUntil(V.ODBC.con!rstInvDtl.EOF,=,True)
			F.Intrinsic.Control.If(V.Local.sInvoiceList,=,"")
			
				V.Local.sInvoiceList.Set(V.ODBC.con!rstInvDtl.FieldValTrim!INV_NO)
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Concat(V.Local.sInvoiceList,",",V.ODBC.con!rstInvDtl.FieldValTrim!INV_NO,V.Local.sInvoiceList)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstInvDtl.MoveNext
		F.Intrinsic.Control.Loop
		F.ODBC.con!rstInvDtl.Close

		'Writing records to UDTs for generating email information
		F.Intrinsic.Control.If(V.ODBC.con!rst.FieldValTrim!EMAIL_FLAG,=,"Y")
			F.Intrinsic.Control.If(V.uGlobal.uVendor.UBound,=,-1)
				V.uGlobal.uVendor.Redim(0,0)
				V.uGlobal.uVendor!KEYNUM.Set(V.ODBC.con!rst.FieldValTrim!KEY_NUM)
				V.uGlobal.uVendor!Vendor_ID.Set(V.ODBC.con!rst.FieldValTrim!VENDOR_ID)
				V.uGlobal.uVendor!Vendor_Name.Set(V.ODBC.con!rst.FieldValTrim!VENDOR_NAME)
				V.uGlobal.uVendor!Invoices.Set(V.Local.sInvoiceList)
				V.uGlobal.uVendor!Pay_Amount.Set(V.ODBC.con!rst.FieldValFloat!CHECK_AMT)
			F.Intrinsic.Control.Else
				F.Intrinsic.Variable.UDTSeek(V.uGlobal.uVendor!Vendor_ID,V.ODBC.con!rst.FieldValTrim!VENDOR_ID,0,V.Local.sRet)
				F.Intrinsic.Control.If(V.Local.sRet,=,"")
					V.Local.iUB.Set(V.uGlobal.uVendor.UBound)
					f.Intrinsic.Control.If(v.uGlobal.uVendor(v.Local.iUB)!Vendor_ID,=,"")
						V.uGlobal.uVendor.RedimPreserve(V.uGlobal.uVendor.LBound,V.Local.iUB)
						V.uGlobal.uVendor(v.Local.iUB)!KEYNUM.Set(V.ODBC.con!rst.FieldValTrim!KEY_NUM)
						V.uGlobal.uVendor(V.Local.iUB)!Vendor_ID.Set(V.ODBC.con!rst.FieldValTrim!VENDOR_ID)
						V.uGlobal.uVendor(V.Local.iUB)!Vendor_Name.Set(V.ODBC.con!rst.FieldValTrim!VENDOR_NAME)
						V.uGlobal.uVendor(V.Local.iUB)!Invoices.Set(V.Local.sInvoiceList)
						V.uGlobal.uVendor(V.Local.iUB)!Pay_Amount.Set(V.ODBC.con!rst.FieldValFloat!CHECK_AMT)
					f.Intrinsic.Control.Else
						F.Intrinsic.Math.Add(V.Local.iUB,1,V.Local.iUB)
						V.uGlobal.uVendor.RedimPreserve(V.uGlobal.uVendor.LBound,V.Local.iUB)
						V.uGlobal.uVendor(v.Local.iUB)!KEYNUM.Set(V.ODBC.con!rst.FieldValTrim!KEY_NUM)
						V.uGlobal.uVendor(V.Local.iUB)!Vendor_ID.Set(V.ODBC.con!rst.FieldValTrim!VENDOR_ID)
						V.uGlobal.uVendor(V.Local.iUB)!Vendor_Name.Set(V.ODBC.con!rst.FieldValTrim!VENDOR_NAME)
						V.uGlobal.uVendor(V.Local.iUB)!Invoices.Set(V.Local.sInvoiceList)
						V.uGlobal.uVendor(V.Local.iUB)!Pay_Amount.Set(V.ODBC.con!rst.FieldValFloat!CHECK_AMT)
					
					f.Intrinsic.Control.EndIf
			
				F.Intrinsic.Control.Else
					F.Intrinsic.String.Concat(V.uGlobal.uVendor(V.Local.sRet.Long)!Invoices,",",V.Local.sInvoiceList,V.uGlobal.uVendor(V.Local.sRet.Long)!Invoices)
					F.Intrinsic.Math.Add(V.uGlobal.uVendor(V.Local.sRet.Long)!Pay_Amount,V.ODBC.con!rst.FieldValFloat!CHECK_AMT,V.uGlobal.uVendor(V.Local.sRet.Long)!Pay_Amount)

				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rst.MoveNext
	F.Intrinsic.Control.Loop
	F.ODBC.con!rst.Close

	'Format batch and file total
	F.Intrinsic.String.Format(V.Local.fTotalAmt,"#.00",V.Local.sTotalAmt)
	F.Intrinsic.String.Replace(V.Local.sTotalAmt,".","",V.Local.sTotalAmt)
	F.Intrinsic.String.LPad(V.Local.sTotalAmt,0,10,V.Local.sBalAmt)
	F.Intrinsic.String.LPad(V.Local.sTotalAmt,0,12,V.Local.sTotalAmt)
	'Checking to see if balanced option was selected or not
	F.Intrinsic.Control.If(V.Global.bBal,=,True)
		'Getting tran number to use for trace number
		F.Intrinsic.String.Left(V.Global.sTranNum,8,V.Local.sTraceTran)

		'Caclulating check digit for balancing record
		F.Intrinsic.Control.CallSub(Chkdigit,"sTranNum",V.Global.sTranNum)

		'Creating trace number for balancing record
		F.Intrinsic.Math.Add(V.Local.iTraceNum,1,V.Local.iTraceNum)
		F.Intrinsic.String.LPad(V.Local.iTraceNum,0,7,V.Local.sTraceNum)
		F.Intrinsic.String.Concat(V.Local.sTraceTran,V.Local.sTraceNum,V.Local.sTraceNum)

		'Formatting company account number and id
		F.Intrinsic.String.RPad(V.Global.sAcctNum," ",17,V.Global.sAcctNum)
		F.Intrinsic.String.RPad(V.Global.sCompID," ",15,V.Global.sCompID)
		F.Intrinsic.String.RPad(V.Global.sCompName," ",22,V.Global.sCompName)

		'Formatting company name
		F.Intrinsic.String.Replace(V.Global.sCompName,"(","",V.Local.sCompName)
		F.Intrinsic.String.Replace(V.Local.sCompName,")","",V.Local.sCompName)
		F.Intrinsic.String.Replace(V.Local.sCompName,"-","",V.Local.sCompName)
		F.Intrinsic.String.Replace(V.Local.sCompName,"/","",V.Local.sCompName)
		F.Intrinsic.String.Replace(V.Local.sCompName,"\","",V.Local.sCompName)
		F.Intrinsic.String.Left(V.Local.sCompName,22,V.Local.sCompName)

		'Concatenating values for balancing record
		F.Intrinsic.String.Concat("6*!*27*!*",V.Global.sTranNum,"*!*",V.Args.iChkDigit,"*!*",V.Global.sAcctNum,"*!*",V.Local.sBalAmt,"*!*",V.Global.sCompID,"*!*",V.Global.sCompName,"*!**!*0*!*",V.Local.sTraceNum,V.Local.sPosValues)
		F.Intrinsic.String.Split(V.Local.sPosValues,"*!*",V.Local.sPosValues)
		F.Intrinsic.String.PositionalString(V.Local.sPosValues,V.Local.iPosDetailLen,V.Local.iPosDetailAlign,V.Local.sDetail)
		F.Intrinsic.String.Concat(V.Local.sFileWrite,V.Ambient.NewLine,V.Local.sDetail,V.Local.sFileWrite)

		'Adding balancing record into hash
		F.Intrinsic.Math.Add(V.Global.sTranNum.Long,V.Local.iHash,V.Local.iHash)

		'Fromatting hash for batch and file
		F.Intrinsic.String.Right(V.Local.iHash,10,V.Local.sHash)
		F.Intrinsic.String.LPad(V.Local.sHash,0,10,V.Local.sHash)

		'Adding 1 to addenda count and formatting
		F.Intrinsic.Math.Add(V.Local.iAddendaCnt,1,V.Local.iAddendaCnt)
		F.Intrinsic.String.LPad(V.Local.iAddendaCnt,0,6,V.Local.sAddendaCnt)

		'Adding 1 to block count
		F.Intrinsic.Math.Add(V.Local.iBlockCnt,1,V.Local.iBlockCnt)

		'Concantenating values for batch trailer record
		V.Local.sClass.Set("200")
		V.Local.sPosValues.Redim(0,0)
		F.Intrinsic.String.Concat("8*!*",V.Local.sClass,"*!*",V.Local.sAddendaCnt,"*!*",V.Local.sHash,"*!*",V.Local.sTotalAmt,"*!*",V.Local.sTotalAmt,"*!*",V.Global.sCompID,"*!**!*",V.Global.sImmOriTranTrim,"*!*0000001",V.Local.sPosValues)
		F.Intrinsic.String.Split(V.Local.sPosValues,"*!*",V.Local.sPosValues)
		F.Intrinsic.String.PositionalString(V.Local.sPosValues,V.Local.iPosBatchTrlLen,V.Local.iPosBatchTrlAlign,V.Local.sBatchTrl)
	F.Intrinsic.Control.Else

		'Fromatting hash for batch and file
		F.Intrinsic.String.Right(V.Local.iHash,10,V.Local.sHash)
		F.Intrinsic.String.LPad(V.Local.sHash,0,10,V.Local.sHash)

		'Adding formatting to addenda count
		F.Intrinsic.String.LPad(V.Local.iAddendaCnt,0,6,V.Local.sAddendaCnt)

		'Concantenating values for batch trailer record
		V.Local.sClass.Set("220")
		V.Local.sPosValues.Redim(0,0)
		F.Intrinsic.String.Concat("8*!*",V.Local.sClass,"*!*",V.Local.sAddendaCnt,"*!*",V.Local.sHash,"*!*000000000000*!*",V.Local.sTotalAmt,"*!*",V.Global.sCompID,"*!**!*",V.Global.sImmOriTranTrim,"*!*0000001",V.Local.sPosValues)
		F.Intrinsic.String.Split(V.Local.sPosValues,"*!*",V.Local.sPosValues)
		F.Intrinsic.String.PositionalString(V.Local.sPosValues,V.Local.iPosBatchTrlLen,V.Local.iPosBatchTrlAlign,V.Local.sBatchTrl)
	F.Intrinsic.Control.EndIf

	'Concatenating the batch trailer onto the write string
	F.Intrinsic.String.Concat(V.Local.sFileWrite,V.Ambient.NewLine,V.Local.sBatchTrl,V.Local.sFileWrite)

	'Creating entry description for batch header
	F.Intrinsic.Date.Month(V.Ambient.Date,V.Local.iMonth)
	F.Intrinsic.Date.Day(V.Ambient.Date,V.Local.iDay)
	F.Intrinsic.String.Concat("Pay ",V.Local.iMonth.String,V.Local.iDay.String,V.Local.sEntryDesc)

	'Creating entry date
	F.Intrinsic.String.Format(V.Ambient.Date,"YYMMDD",V.Local.sEntryDate)

	'Formatting company name
	F.Intrinsic.String.Replace(V.Global.sCompName,"(","",V.Local.sCompName)
	F.Intrinsic.String.Replace(V.Local.sCompName,")","",V.Local.sCompName)
	F.Intrinsic.String.Replace(V.Local.sCompName,"-","",V.Local.sCompName)
	F.Intrinsic.String.Replace(V.Local.sCompName,"/","",V.Local.sCompName)
	F.Intrinsic.String.Replace(V.Local.sCompName,"\","",V.Local.sCompName)
	F.Intrinsic.String.Left(V.Local.sCompName,16,V.Local.sCompName)

	'Concatenating the batch header values
	V.Local.sPosValues.Redim(0,0)
	F.Intrinsic.String.Concat("5*!*",V.Local.sClass,"*!*",V.Local.sCompName,"*!*Vendor Payments*!*",V.Global.sCompID,"*!*PPD*!*",V.Local.sEntryDesc,"*!*",V.Local.sEntryDate,"*!*",V.Local.sEntryDate,"*!**!*1*!*",V.Global.sTranNum,"*!*0000001",V.Local.sPosValues)
	F.Intrinsic.String.Split(V.Local.sPosValues,"*!*",V.Local.sPosValues)
	F.Intrinsic.String.PositionalString(V.Local.sPosValues,V.Local.iPosBatchHdrLen,V.Local.iPosBatchHdrAlign,V.Local.sBatchHdr)

	'Concatenating the batch header onto write string
	F.Intrinsic.String.Concat(,V.Local.sBatchHdr,V.Ambient.NewLine,V.Local.sFileWrite,V.Local.sFileWrite)

	'Adding 4 to block count to cover batch header, trailer and file header, trailer
	F.Intrinsic.Math.Add(V.Local.iBlockCnt,4,V.Local.iBlockCnt)
	F.Intrinsic.Math.Mod(V.Local.iBlockCnt,10,V.Local.iMod)
	F.Intrinsic.Control.If(V.Local.iMod,>,0)
		F.Intrinsic.Math.Sub(10,V.Local.iMod,V.Local.iMod)
		F.Intrinsic.Math.Add(V.Local.iBlockCnt,V.Local.iMod,V.Local.iBlockCnt)
		F.Intrinsic.Math.Div(V.Local.iBlockCnt,10,V.Local.iBlockCnt)
	F.Intrinsic.Control.Else
		F.Intrinsic.Math.Div(V.Local.iBlockCnt,10,V.Local.iBlockCnt)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.String.LPad(V.Local.iBlockCnt,0,"6",V.Local.sBlockCnt)

	'Padding the Hash with zeros
	F.Intrinsic.String.LPad(V.Local.sHash,0,10,V.Local.sHash)
	F.Intrinsic.String.LPad(V.Local.sAddendaCnt,0,8,V.Local.sAddendaCnt)

	'Concatenating the file trailer values
	V.Local.sPosValues.Redim(0,0)
	F.Intrinsic.Control.If(V.Global.bBal,=,True)
		F.Intrinsic.String.Concat("9*!*000001*!*",V.Local.sBlockCnt,"*!*",V.Local.sAddendaCnt,"*!*",V.Local.sHash,"*!*",V.Local.sTotalAmt,"*!*",V.Local.sTotalAmt,"*!*",V.Local.sPosValues)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Concat("9*!*000001*!*",V.Local.sBlockCnt,"*!*",V.Local.sAddendaCnt,"*!*",V.Local.sHash,"*!*000000000000*!*",V.Local.sTotalAmt,"*!*",V.Local.sPosValues)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Split(V.Local.sPosValues,"*!*",V.Local.sPosValues)
	F.Intrinsic.String.PositionalString(V.Local.sPosValues,V.Local.iPosFileTrlLen,V.Local.iPosFileTrlAlign,V.Local.sFileTrl)

	'Concatenating the file trailer onto the write string
	F.Intrinsic.String.Concat(V.Local.sFileWrite,V.Ambient.NewLine,V.Local.sFileTrl,V.Local.sFileWrite)

	'Fromatting time for file header
	F.Intrinsic.String.Format(V.Ambient.Time,"HHNN",V.Local.sTime)

	'Cehcking to see if alternate immediate destination was specified
	V.Local.sPosValues.Redim(0,0)

	'Concatenating the file header values
	F.Intrinsic.String.Concat("1*!*01*!*"," ",V.Global.sImmDestTran,"*!*",V.Global.sImmOriTran,"*!*",V.Local.sEntryDate,"*!*",V.Local.sTime,"*!*A*!*094*!*10*!*1*!*",V.Global.sImmDest,"*!*",V.Global.sImmOri,"*!*",V.Local.sPosValues)
	F.Intrinsic.String.Split(V.Local.sPosValues,"*!*",V.Local.sPosValues)
	F.Intrinsic.String.PositionalString(V.Local.sPosValues,V.Local.iPosFileHdrLen,V.Local.iPosFileHdrAlign,V.Local.sFileHdr)

	'Concatenating the file header onto the write string
	F.Intrinsic.String.Concat(V.Local.sFileHdr,V.Ambient.NewLine,V.Local.sFileWrite,V.Local.sFileWrite)

	'Calcaulting 9 fill records needed based on mod 10
	V.Local.sFill.Set("9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999")
	F.Intrinsic.Control.If(V.Local.iMod,>,0)
		V.Local.i.Set(1)
		F.Intrinsic.Control.DoUntil(V.Local.i,>,V.Local.iMod)
			'Concatenating on 9 fill records
			F.Intrinsic.String.Concat(V.Local.sFileWrite,V.Ambient.NewLine,V.Local.sFill,V.Local.sFileWrite)
			F.Intrinsic.Math.Add(V.Local.i,1,V.Local.i)
		F.Intrinsic.Control.Loop
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.CallSub(Filesave,"sFileWrite",V.Local.sFileWrite)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("BuildFile_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.BuildFile.End

Program.Sub.ChkDigit.Start
F.Intrinsic.Control.SetErrorHandler("ChkDigit_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sTranNum.Declare(String)
V.Local.iChkDigit.Declare(Long)
V.Local.i.Declare(Long)
V.Local.fRnd.Declare(Float)

'Calculating the check digit using a mod 10
F.Intrinsic.String.LimitSplit(V.Args.sTranNum,1,V.Local.sTranNum)
F.Intrinsic.Math.Mult(V.Local.sTranNum(0).Long,3,V.Local.iChkDigit)
F.Intrinsic.Math.Mult(V.Local.sTranNum(1).Long,7,V.Local.i)
F.Intrinsic.Math.Add(V.Local.iChkDigit,V.Local.i,V.Local.iChkDigit)
F.Intrinsic.Math.Mult(V.Local.sTranNum(2).Long,1,V.Local.i)
F.Intrinsic.Math.Add(V.Local.iChkDigit,V.Local.i,V.Local.iChkDigit)
F.Intrinsic.Math.Mult(V.Local.sTranNum(3).Long,3,V.Local.i)
F.Intrinsic.Math.Add(V.Local.iChkDigit,V.Local.i,V.Local.iChkDigit)
F.Intrinsic.Math.Mult(V.Local.sTranNum(4).Long,7,V.Local.i)
F.Intrinsic.Math.Add(V.Local.iChkDigit,V.Local.i,V.Local.iChkDigit)
F.Intrinsic.Math.Mult(V.Local.sTranNum(5).Long,1,V.Local.i)
F.Intrinsic.Math.Add(V.Local.iChkDigit,V.Local.i,V.Local.iChkDigit)
F.Intrinsic.Math.Mult(V.Local.sTranNum(6).Long,3,V.Local.i)
F.Intrinsic.Math.Add(V.Local.iChkDigit,V.Local.i,V.Local.iChkDigit)
F.Intrinsic.Math.Mult(V.Local.sTranNum(7).Long,7,V.Local.i)
F.Intrinsic.Math.Add(V.Local.iChkDigit,V.Local.i,V.Local.iChkDigit)
F.Intrinsic.Math.Mod(V.Local.iChkDigit,10,V.Local.fRnd)
F.Intrinsic.Control.If(V.Local.fRnd,=,0)
	F.Intrinsic.Math.Sub(V.Local.iChkDigit,V.Local.iChkDigit,V.Local.iChkDigit)
F.Intrinsic.Control.Else
	F.Intrinsic.Math.Add(V.Local.iChkDigit,10,V.Local.i)
	F.Intrinsic.Math.IDiv(V.Local.i,10,V.Local.i)
	F.Intrinsic.Math.Mult(V.Local.i,10,V.Local.i)
	F.Intrinsic.Math.Sub(V.Local.i,V.Local.iChkDigit,V.Local.iChkDigit)
F.Intrinsic.Control.EndIf
F.Intrinsic.Variable.AddRV("iChkDigit",V.Local.iChkDigit)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("ChkDigit_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.ChkDigit.End

Program.Sub.FileSave.Start
F.Intrinsic.Control.SetErrorHandler("FileSave_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sFile.Declare(String)

F.Intrinsic.UI.ShowSaveFileDialog("","txt|*.txt",V.Local.sFile)
F.Intrinsic.Control.If(V.Local.sFile,<>,"***CANCEL***")
	F.Intrinsic.File.String2File(V.Local.sFile,V.Args.sFileWrite)
F.Intrinsic.Control.EndIf

'call the loadgrid and buildstyle subs
f.Intrinsic.Control.CallSub(loadflexgrid)
f.Intrinsic.Control.CallSub(buildstyle)

'F.Intrinsic.Control.CallSub(Emailnotifications)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("FileSave_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf
Program.Sub.FileSave.End

Program.Sub.f_contactlist_unload.Start
F.Intrinsic.Control.SetErrorHandler("f_contactlist_unload_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

Gui.F_ContactList..Visible(False)
'V.Global.bBusy.Set(False)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("f_contactlist_unload_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: ATG_NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.f_contactlist_unload.End

Program.Sub.cmdadd_click.Start
F.Intrinsic.Control.SetErrorHandler("cmdadd_click_Err")
F.Intrinsic.Control.ClearErrors

v.Local.srecip.Declare(string)
V.Local.sError.Declare(String)
V.Local.sEmail.Declare(String)
V.Local.i.Declare(Long)
V.Local.bChk.Declare(Boolean)

f.Intrinsic.Control.If(v.Screen.F_ContactList!ddlContact.Text,=,"")
	f.Intrinsic.UI.Msgbox("Please select a recipient from the drop down list")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf

V.Local.bChk.Set(False)
'Exit if no email selected or enetered
F.Intrinsic.Control.If(V.Screen.F_ContactList!txtEmail.Text,=,"")
	F.Intrinsic.UI.Msgbox("Please enter a recipient email address..","Invalid Email")
	Gui.F_ContactList.txtEmail.SetFocus
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'Checking for valid email
V.Local.sEmail.Set(V.Screen.F_ContactList!txtEmail.Text)
F.Intrinsic.String.Split(V.Local.sEmail.Trim,"@",V.Local.sEmail)
F.Intrinsic.Control.If(V.Local.sEmail.UBound,<>,1)
	F.Intrinsic.UI.Msgbox("Invalid email address.","Invalid Email")
	Gui.F_ContactList.txtEmail.SetFocus
	Gui.F_ContactList.txtEmail.SelectAll
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sEmail(1),".",V.Local.sEmail)
	F.Intrinsic.Control.If(V.Local.sEmail.UBound,<,1)
		F.Intrinsic.UI.Msgbox("Invalid email address.","Invalid Email")
		Gui.F_ContactList.txtEmail.SetFocus
		Gui.F_ContactList.txtEmail.SelectAll
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

v.Local.i.Set(v.uGlobal.urecip.UBound)
f.Intrinsic.Math.Add(v.Local.i,1,v.Local.i)
v.uGlobal.uRecip.RedimPreserve(0,v.Local.i)
'set the new email
v.uGlobal.uRecip(v.Local.i)!EMAIL.Set(v.Screen.F_ContactList!txtEmail.text)
v.uGlobal.uRecip(v.Local.i)!VENDOR_ID.Set(v.Global.sVendor)

f.Intrinsic.String.Split(v.Screen.F_ContactList!ddlContact.Text,"<",v.Local.srecip)
f.Intrinsic.String.Split(v.Local.srecip,",",v.Local.srecip)

f.Intrinsic.String.Build("{0} {1}",v.Local.srecip(1).Trim,v.Local.srecip(0),v.Local.srecip)

v.uGlobal.uRecip(v.Local.i)!RECIP.set(v.Local.srecip.Trim)
'F.Intrinsic.Control.If(V.Screen.F_ContactList!txtEmail.Text,=,V.G)
'Search for email address in memory array  to avoid duplicates
'F.Intrinsic.Control.For(V.Local.i,0,V.Global.sList.UBound,1)
'	F.Intrinsic.Control.If(V.Screen.F_ContactList!txtEmail.Text,=,V.Global.sList(v.Local.i))
'		V.Local.bChk.Set(True)
'		F.Intrinsic.Control.ExitFor(V.Local.i)
'	F.Intrinsic.Control.EndIf
'F.Intrinsic.Control.Next(V.Local.i)

'add it to the uRecipUDT
'If email not found in list, add it to memory array
'F.Intrinsic.Control.If(V.Local.bChk,=,False)
'	F.Intrinsic.Control.If(V.Global.sList.UBound,=,-1)
'		V.Global.sList.Redim(0,0)
'	F.Intrinsic.Control.Else
'		V.Global.sList.RedimPreserve(1)
'	F.Intrinsic.Control.EndIf
'	V.Global.sList(v.Global.sList.UBound).Set(V.Screen.F_ContactList!txtEmail.Text)
'F.Intrinsic.Control.EndIf

'Fill list from memory array
'Gui.F_ContactList.txtEmail.Text("")
F.Intrinsic.Control.CallSub("FillList")

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdadd_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: ATG_NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf
Program.Sub.cmdadd_click.End

Program.Sub.cmdremove_click.Start
F.Intrinsic.Control.SetErrorHandler("cmdremove_click_Err")
F.Intrinsic.Control.ClearErrors


V.Local.sError.Declare(String)
V.Local.i.Declare(Long)
V.Local.iStart.Declare(Long)
V.Local.iEnd.Declare(Long)
V.Local.iTemp.Declare(Long)
V.Local.bFound.Declare(Boolean)

'Exit if no email selected in list
F.Intrinsic.Control.If(V.Screen.F_ContactList!txtEmail.Text,=,"")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'Search memory array for ordinal of selected email
F.Intrinsic.Control.For(V.Local.iStart,0,V.uGlobal.uRecip.UBound,1)
	F.Intrinsic.Control.If(V.Screen.F_ContactList!txtEmail.Text,=,V.uglobal.uRecip(v.Local.iStart)!EMAIL)
		'flag it for deletion
		Function.Intrinsic.Variable.UDTFlagOrdinal(v.uGlobal.uRecip,True,v.Local.iStart)
	f.Intrinsic.Control.EndIf
'		V.Local.bFound.Set(True)
'		F.Intrinsic.Control.ExitFor(V.Local.iStart)
'	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iStart)

'delete the flagged
f.Intrinsic.Variable.UDTDeleteFlagged(v.uGlobal.uRecip)

'Shift memory array to remove selected email
'F.Intrinsic.Math.Sub(V.Global.sList.UBound,1,V.Local.iEnd)
'F.Intrinsic.Control.For(V.Local.i,V.Local.iStart,V.Local.iEnd,1)
'	F.Intrinsic.Math.Add(V.Local.i,1,V.Local.iTemp)
'	V.Global.sList(v.Local.i).set(V.Global.sList(v.Local.iTemp))
'F.Intrinsic.Control.Next(V.Local.i)
'F.Intrinsic.Control.If(V.Global.sList.UBound,=,0)
'	V.Global.sList.Redim(-1,-1)
'F.Intrinsic.Control.else
'	V.Global.sList.RedimPreserve(0, V.Local.iEnd)
'F.Intrinsic.Control.EndIf

'Fill list from memory array
F.Intrinsic.Control.CallSub("FillList")

'Clear email selection
Gui.F_ContactList.ddlContact.ListIndex(0)
Gui.F_ContactList.txtEmail.Text("")

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdremove_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: ATG_NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.cmdremove_click.End

Program.Sub.PopContacts.Start
F.Intrinsic.Control.SetErrorHandler("PopContacts_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sTemp.Declare(String)

''Add blank item to drop down list
'Gui.F_ContactList.ddlContact.AddItem("")

'Fill drop down list with contacts/emails for the customer on the order
F.Intrinsic.String.Concat("Select Name, Alt_ID, Email1, Email2, Name_Last, Name_First from Contact where Cust='",V.Global.sVendorID,"' and Type = 'V' order by Name_Last, Name_First",V.Local.sSQL)
F.ODBC.Connection!con.OpenRecordsetRO("rst",V.Local.sSQL)
F.Intrinsic.Control.DoUntil(V.ODBC.con!rst.EOF,=,True)
	F.Intrinsic.Control.If(V.ODBC.con!rst.FieldValTrim!Email1,<>,"")
		F.Intrinsic.string.Concat(V.ODBC.con!rst.FieldValTrim!Name," <",V.ODBC.con!rst.FieldValTrim!Email1,">",V.Local.sTemp)
		Gui.F_ContactList.ddlContact.AddItem(V.Local.sTemp)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.ODBC.con!rst.FieldValTrim!Email2,<>,"")
		F.Intrinsic.string.Concat(V.ODBC.con!rst.FieldValTrim!Name," <",V.ODBC.con!rst.FieldValTrim!Email2,">",V.Local.sTemp)
		Gui.F_ContactList.ddlContact.AddItem(V.Local.sTemp)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rst.MoveNext
F.Intrinsic.Control.Loop
F.ODBC.con!rst.Close

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("PopContacts_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: ATG_NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.PopContacts.End

Program.Sub.EmailNotifications.Start
F.Intrinsic.Control.SetErrorHandler("EmailNotifications_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.i.Declare(Long)
V.Local.ia.Declare(Long)
V.Local.sText.Declare(String)
V.Local.sReplyEmail.Declare(String)
V.Local.sSql.Declare(String)
V.Local.sEmail.Declare(String)
V.Local.bChk.Declare(Boolean)

'new variables declared by WAW
V.Local.sdate.Declare(String)
V.Local.scompany.Declare(String)
V.Local.scheckline.Declare(String)
V.Local.iinvoicecount.Declare(Long)
V.Local.sinvoices.Declare(String)
V.Local.spayline.Declare(String)
V.Local.sinvoiceline.Declare(String)
V.Local.iinvoicecount2.Declare(Long)
V.Local.sSql2.Declare(String)
V.Local.sinvoice.Declare(String)
V.Local.finvoiceamount.Declare(Float)
V.Local.ssql3.Declare(String)
V.Local.scheckno.Declare(String)

F.Intrinsic.Control.If(V.uGlobal.uVendor.UBound,=,-1)
	F.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.For(V.Local.i,V.uGlobal.uVendor.LBound,V.uGlobal.uVendor.UBound,1)
	V.Local.bChk.Set(False)
	V.Global.sVendorID.Set(V.uGlobal.uVendor(V.Local.i)!Vendor_ID)
	
	Gui.F_ContactList.ddlContact.ClearItems
	Gui.F_ContactList.lstEmails.ClearItems
	Gui.F_ContactList.txtEmail.Text("")
	Gui.F_ContactList.txtSubject.Text("")
	Gui.F_ContactList.mltxtBody.Text("")
	F.Intrinsic.Control.CallSub(Popcontacts)
	Gui.F_ContactList.txtSubject.Text("ACH Payment Notification")

	'set the date line
	F.Intrinsic.String.Build("{0}{1}{2}","Payment Issue Date:",V.Ambient.Tab,V.ambient.date,V.Local.sdate)
	'set the company line
	F.Intrinsic.String.Build("{0}{1}","Company: ",V.uglobal.uVendor(v.local.i)!Vendor_Name,V.Local.scompany)
	'split the invoices
	F.Intrinsic.String.Split(V.uGlobal.uVendor(v.Local.i)!Invoices,",",V.Local.sinvoices)

'	F.Intrinsic.String.Build("Select KEY_NUM from ACH_PAYMENT where VENDOR_ID = '{0}' and CHECK_AMT = '{1}'",V.uGlobal.uVendor(v.Local.i)!Vendor_ID,V.uGlobal.uVendor(v.Local.i)!Pay_Amount,V.Local.ssql3)
'	F.ODBC.Connection!con.OpenLocalRecordsetRO("rst2",V.local.ssql3)
'	F.Intrinsic.Control.If(V.ODBC.con!rst2.EOF,<>,True)
'		V.Local.scheckno.Set(V.ODBC.con!rst2.FieldValTrim!KEY_NUM)
'	F.Intrinsic.Control.Else
'		V.Local.scheckno.Set("")
'	F.Intrinsic.Control.EndIf
'	F.ODBC.con!rst2.Close

	V.Local.scheckno.Set(V.uGlobal.uVendor(v.Local.i)!KEYNUM)

	'set the ACH transaction ID /Check Number Line
	F.Intrinsic.String.Build("{0}{1}{2}","ACH Transaction ID:",V.Ambient.Tab,V.local.scheckno,V.Local.scheckline)
	'set the pay amount

	V.Global.uPayAmount.Set(V.uGlobal.uVendor(v.Local.i)!Pay_Amount)
	'format the pay amount
	F.Intrinsic.String.Format(V.Global.uPayAmount,"###,##0.00##",V.Global.uPayAmount)

	F.Intrinsic.String.Split(V.uGlobal.uVendor(v.Local.i)!Invoices,",",V.Local.sinvoices)

	F.Intrinsic.Control.For(V.local.iinvoicecount2,V.Local.sinvoices.LBound,V.Local.sinvoices.UBound,1)
		'if there are no invoices move to the next
		F.Intrinsic.Control.If(V.Local.sinvoices(v.local.iinvoicecount2),=,"")
			V.Local.sinvoiceline.Set("No Invoices Found")
			V.Global.uPayAmount.Set(0.00)
		'otherwise build your invoice line			
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("Select NET  from ACH_DTL_INV where INV_NO = '{0}' and VENNO = '{1}' and CHKNO = '{2}'",V.Local.sinvoices(v.Local.iinvoicecount2),V.uGlobal.uVendor(v.Local.i)!Vendor_ID,V.local.scheckno,V.Local.sSql2)
			F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSql2)
			F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,<>,True)
				V.Local.sInvoice.Set(V.local.sinvoices(v.Local.iinvoicecount2))
				V.Local.finvoiceamount.Set(V.ODBC.con!rst.FieldValTrim!NET)
		
				F.Intrinsic.String.Format(V.local.finvoiceamount,"###,##0.00##",V.local.finvoiceamount)

				F.Intrinsic.Control.If(V.Local.sinvoiceline,=,"")
					F.Intrinsic.string.build("{0}{1}{0}{2}{3}",V.ambient.tab,V.local.sinvoices(v.local.iinvoicecount2),"$",V.Local.finvoiceamount,V.local.sinvoiceline)
				F.Intrinsic.Control.Else
					F.Intrinsic.string.build("{0}{1}{2}{3}{2}{4}{5}",V.local.sinvoiceline,V.ambient.newline,V.ambient.tab,V.local.sinvoices(v.local.iinvoicecount2),"$",V.Local.finvoiceamount,V.local.sinvoiceline)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rst.Close
		F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Next(V.local.iinvoicecount2)

	F.Intrinsic.String.Format(V.Global.uPayAmount,"###,##0.00##",V.Global.uPayAmount)

	V.Local.sinvoice.Set("")
	V.Local.finvoiceamount.Set(0)

'	F.Intrinsic.String.Concat("Company: ",V.uGlobal.uVendor(V.Local.i)!Vendor_Name,V.Ambient.NewLine,"Invoices: ",V.uGlobal.uVendor(V.Local.i)!Invoices,V.Ambient.NewLine,"Payment Amount: ",V.uGlobal.uVendor(V.Local.i)!Pay_Amount,V.Local.sText)
	F.Intrinsic.String.Build("{0}{1}{2}{1}{3}{1}{4}{1}{5}{1}{6}{7}",V.Local.scheckline,V.Ambient.NewLine,V.Local.sdate,V.Local.scompany,"Invoices: ",V.Local.sinvoiceline,"Total Payment Amount $",V.Global.uPayAmount,V.Local.sText)

	V.Local.sinvoiceline.Set("")

	Gui.F_ContactList.mltxtBody.Text(V.Local.sText)
	F.Global.Security.GetUserEmail(V.Caller.User,V.Caller.CompanyCode,V.Local.sReplyEmail)
	Gui.F_ContactList.txtReplyEmail.Text(V.Local.sReplyEmail)
	F.Intrinsic.String.Concat("ACH Email Notificiation For ",V.uGlobal.uVendor(V.Local.i)!Vendor_Name,V.Local.sText)
	Gui.F_ContactList..Caption(V.Local.sText)
	V.Global.sList.Redim(-1,-1)
	Gui.F_ContactList..Show

	F.Intrinsic.String.Concat("Select EMAIL from V_VENDOR_ADDL where VENDOR = '",V.uGlobal.uVendor(V.Local.i)!Vendor_ID.Trim,"'",V.Local.sSql)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSql)
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,<>,True)
		V.Local.sEmail.Set(V.ODBC.con!rst.FieldValTrim!EMAIL)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.If(V.Local.sEmail,<>,"")
		Gui.F_ContactList.lstEmails.AddItem(V.ODBC.con!rst.FieldValTrim!EMAIL)
		'Search for email address in memory array  to avoid duplicates
		F.Intrinsic.Control.For(V.Local.ia,0,V.Global.sList.UBound,1)
			F.Intrinsic.Control.If(V.Local.sEmail,=,V.Global.sList(v.Local.ia))
				V.Local.bChk.Set(True)
				F.Intrinsic.Control.ExitFor(V.Local.ia)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.ia)

		'If email not found in list, add it to memory array
		F.Intrinsic.Control.If(V.Local.bChk,=,False)
			F.Intrinsic.Control.If(V.Global.sList.UBound,=,-1)
				V.Global.sList.Redim(0,0)
			F.Intrinsic.Control.Else
				V.Global.sList.RedimPreserve(1)
			F.Intrinsic.Control.EndIf
			V.Global.sList(v.Global.sList.UBound).Set(V.Local.sEmail)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

	F.ODBC.con!rst.Close
	V.Global.bBusy.Set(True)
	F.Intrinsic.Control.CallSub(Wait)
F.Intrinsic.Control.Next(V.Local.i)
F.Intrinsic.Control.CallSub(Unload)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("EmailNotifications_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: ATG_NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf
Program.Sub.EmailNotifications.End

Program.Sub.FillList.Start
F.Intrinsic.Control.SetErrorHandler("FillList_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.i.Declare(Long)
v.Local.slist.Declare(string)
v.Local.ssql.declare(string)

'set the new list
v.Global.snewlist.set("")

f.Intrinsic.Control.If(v.Screen.F_ContactList!txtEmail.text,=,"")
	f.Intrinsic.String.Build("{0}{1}{2}{3}",v.Screen.F_ContactList!txtEmail.Text,v.Ambient.NewLine,v.Screen.F_ContactList!lstEmails.Text,v.Global.sNewList)
	v.Global.snewlist.Set(v.Screen.F_ContactList!txtEmail.Text)
f.Intrinsic.Control.else
	f.Intrinsic.String.Build("{0}{1}{2}",v.Global.snewlist,v.Screen.F_ContactList!txtEmail.Text,v.Global.sNewList,v.Global.sNewList)
f.Intrinsic.Control.EndIf

'f.Intrinsic.Control.If(v.Screen.F_ContactList!ddlContact.Text,<>,"")
'	f.Intrinsic.String.Build("{0}{1}{2}",v.Global.snewlist,v.Screen.F_ContactList!ddlContact.Text,v.Global.sNewList,v.Global.sNewList)
'f.Intrinsic.Control.EndIf

gui.F_ContactList.ddlContact.Text("")

'f.Intrinsic.String.Build("Select EMAIL from GCG_3526_EACH_REMIT where VENDOR = '{0}'",v.Global.sVendor,v.Local.ssql)
'F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.ssql)
'F.Intrinsic.Control.DOUNTIL(V.ODBC.con!rst.EOF,=,True)
'	gui.F_ContactList.lstEmails.AddItem(v.ODBC.con!rst.FieldValTrim!EMAIL)
'F.ODBC.con!rst.MoveNext
'Function.Intrinsic.Control.Loop
'F.ODBC.con!rst.Close

gui.F_ContactList.lstEmails.additem(v.Global.sNewList)

gui.F_ContactList.txtEmail.text("")

'gui.F_ContactList.lstEmails.additem(v.Screen.F_ContactList!lstEmails.Text)

'v.Local.slist.Set(v.Screen.F_ContactList!lstEmails.Text)

'v.Global.sNewList.Set(v.Screen.F_ContactList!txtEmail.Text)

'Gui.F_ContactList.lstEmails.ClearItems

'Fill listbox from memory array
'F.Intrinsic.Control.For(V.Local.i,0,V.uGlobal.uRecip.UBound,1)
'	Gui.F_ContactList.lstEmails.AddItem(V.uGlobal.urecip(v.Local.i)!EMAIL)
'F.Intrinsic.Control.Next(V.Local.i)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("FillList_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: ATG_NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.FillList.End

Program.Sub.ddlcontact_click.Start
F.Intrinsic.Control.SetErrorHandler("ddlcontact_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iPos.Declare(Long)
V.Local.sEmail.Declare(String)

F.Intrinsic.Control.If(V.Screen.F_ContactList!ddlContact.Text,<>,"")
	'Select contact from drop down list - populate textbox
	F.Intrinsic.String.Instr(V.Screen.F_ContactList!ddlContact.Text,"<",V.Local.ipos)
	F.Intrinsic.String.mid(V.Screen.F_ContactList!ddlContact.Text,V.Local.iPos,V.Local.sEmail)
	F.Intrinsic.String.Replace(V.Local.sEmail,"<","",V.Local.sEmail)
	F.Intrinsic.String.Replace(V.Local.sEmail,">","",V.Local.sEmail)
	Gui.F_ContactList.txtEmail.Text(V.Local.sEmail)
F.Intrinsic.Control.Else
	Gui.F_ContactList.txtEmail.Text("")
F.Intrinsic.Control.endif

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("ddlcontact_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: ATG_NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.ddlcontact_click.End

Program.Sub.Wait.Start
F.Intrinsic.Control.SetErrorHandler("Wait_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

F.Intrinsic.Control.DoUntil(V.Global.bBusy,=,False)
	F.Intrinsic.UI.Sleep(1)
	F.Intrinsic.Control.DoEvents
F.Intrinsic.Control.Loop

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Wait_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: ATG_NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.Wait.End

Program.Sub.form2_unload.Start
F.Intrinsic.Control.SetErrorHandler("form2_unload_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

'close the second form
Gui.Form2..Visible(false)

'end the program
F.Intrinsic.Control.End

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("form2_unload_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3526_ATG_NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf
Program.Sub.form2_unload.End

Program.Sub.chkall_click.Start
F.Intrinsic.Control.SetErrorHandler("chkall_click_Err")
F.Intrinsic.Control.ClearErrors
v.Local.i.Declare(long)
v.Local.irows.Declare(long)
V.Local.sError.Declare(String)
v.Local.iplusone.Declare(string)

f.Intrinsic.Math.Add(v.uGlobal.urecip.UBound,1,v.Local.irows)

'check all the checkboxes
F.Intrinsic.Control.If(v.Screen.Form2!chkAll.Value,=,1)
	f.Intrinsic.Control.For(v.Local.i,1,v.Local.irows,1)
		gui.Form2.gsflexgrid1.TextMatrix(2,v.Local.i,1)
	f.Intrinsic.Control.Next(v.Local.i)
f.Intrinsic.Control.Else
'otherwise uncheck them all
	f.Intrinsic.Control.For(v.Local.i,1,v.Local.irows,1)
		gui.Form2.gsflexgrid1.TextMatrix(2,v.Local.i,0)
	f.Intrinsic.Control.Next(v.Local.i)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("chkall_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3526_ATG_NACHA.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf
Program.Sub.chkall_click.End

Program.Sub.Buildstyle.Start
F.Intrinsic.Control.SetErrorHandler("Buildstyle_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.ic.Declare(Long)
V.Local.srecipients.Declare(String)
V.Local.icount.Declare(Long)
V.Local.irows.Declare(Long,0)
V.Local.srecips.Declare(String)

F.Intrinsic.Math.Add(V.uGlobal.uRecip.UBound,2,V.Local.irows)

Gui.Form2.gsflexgrid1.Cols(4)
Gui.Form2.gsflexgrid1.Rows(V.local.irows)

Gui.Form2.gsflexgrid1.FixedRows(V.local.irows)
Gui.Form2.gsflexgrid1.SetColumnPercentages(".30:.45:.10:.15")

F.Intrinsic.Control.For(V.Local.iC,V.uGlobal.uRecip.LBound,V.uGlobal.uRecip.UBound,1)
		F.Intrinsic.Math.Add(V.Local.ic,1,V.Local.icount)
		Gui.Form2.gsflexgrid1.BuildStyle(1,0,"Type","Locked",True)
		Gui.Form2.gsflexgrid1.BuildStyle(1,0,"Format","Alignment",2)
		Gui.Form2.gsflexgrid1.BuildStyle(1,0,"Fontstyle","Bold",True)
		Gui.Form2.gsflexgrid1.BuildStyle(2,0,"Type","Locked",True)
		Gui.Form2.gsflexgrid1.BuildStyle(2,0,"Format","Alignment",2)
		Gui.Form2.gsflexgrid1.BuildStyle(2,0,"Fontstyle","Bold",False)
		V.Local.srecips.Set(V.uGlobal.uRecip(v.Local.ic)!RECIP)
		Gui.Form2.gsflexgrid1.GSGOverrideProperty(1,V.Local.icount,"type","dropdownlist",V.Local.srecips)
'		Gui.Form2.gsflexgrid1.GSGOverrideProperty(V.Local.ic,1,"Type","dropdownlist",V.uGlobal.uRecip(v.Local.ic)!RECIP)
'		Gui.Form2.gsflexgrid1.BuildStyle(3,1,"Type","dropdownlist",V.uGlobal.uRecip(v.Local.ic)!RECIP)
		Gui.Form2.gsflexgrid1.BuildStyle(3,1,"Format","Alignment",2)
		Gui.Form2.gsflexgrid1.BuildStyle(3,1,"Fontstyle","Bold",False)
		Gui.Form2.gsflexgrid1.BuildStyle(2,2,"Type","Checkbox","None")
		Gui.Form2.gsflexgrid1.BuildStyle(2,2,"Format","Alignment",2)
		Gui.Form2.gsflexgrid1.BuildStyle(2,2,"Fontstyle","Bold",False)
		Gui.Form2.gsflexgrid1.BuildStyle(2,3,"Type","command","View")
		Gui.Form2.gsflexgrid1.BuildStyle(2,3,"Format","Alignment",2)
		Gui.Form2.gsflexgrid1.BuildStyle(2,3,"Fontstyle","Bold",False)
		Gui.Form2.gsflexgrid1.TextMatrix(0,V.Local.icount,V.uGlobal.uRecip(v.local.ic)!VENDOR_ID)
		Gui.Form2.gsflexgrid1.ApplyStyle(V.Local.icount,2)
'		Gui.Form2.gsflexgrid1.ApplyStyle(V.Local.icount,3)
F.Intrinsic.Control.Next(V.Local.iC)

'set the titles
Gui.Form2.gsflexgrid1.TextMatrix(0,0,"Vendor")
Gui.Form2.gsflexgrid1.TextMatrix(1,0,"Recipients")
Gui.Form2.gsflexgrid1.TextMatrix(2,0,"Send")
Gui.Form2.gsflexgrid1.TextMatrix(3,0,"View")
Gui.Form2.gsflexgrid1.ApplyStyle(0,1)

'make the form and grid visible
gui.Form2..Visible(true)
gui.Form2.gsflexgrid1.Visible(True)
F.Intrinsic.Control.ExitSub

	F.Intrinsic.Control.Label("Buildstyle_Err")
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		Function.Intrinsic.String.Concat("Project: GCG_3526_ATG_NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf
Program.Sub.Buildstyle.End

Program.Sub.LoadFlexgrid.Start
F.Intrinsic.Control.SetErrorHandler("LoadFlexgrid_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.i.Declare(Long)
V.Local.ssql.Declare(String)
V.Local.srecipientsline.Declare(String)
V.Local.srecipients.Declare(String)
V.Local.iubound.Declare(Long,0)
v.Local.semail.Declare(string)

'Gui.Form2.gsflexgrid1.Visible(False)
V.uGlobal.uRecip.Redim(0,V.uGlobal.uVendor.UBound)

'loop through the uVendor UDT to get vendors and recipients
F.Intrinsic.Control.For(V.Local.i,V.uGlobal.uVendor.LBound,V.uGlobal.uVendor.UBound,1)

	'get the vendor name and recipients
	F.intrinsic.String.Build("Select FIRST_NAME, LAST_NAME, EMAIL from GCG_3526_EACH_Remit where VENDOR = '{0}'",V.uGlobal.uVendor(v.Local.i)!Vendor_ID,V.Local.ssql)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.ssql)
	f.Intrinsic.Control.If(v.ODBC.con!rst.EOF,=,False)
		F.Intrinsic.Control.DOUNTIL(V.ODBC.con!rst.EOF,=,True)
		'set the vendor
		V.uGlobal.uRecip(v.Local.i)!VENDOR_ID.Set(V.uGlobal.uVendor(v.Local.i)!Vendor_Name)
		'set the email
		v.Local.semail.Set(v.odbc.con!rst.FieldValTrim!EMAIL)
		'build the names
		F.Intrinsic.String.Build("{0} {1}",V.odbc.con!rst.FieldValTrim!FIRST_NAME,V.ODBC.con!rst.FieldValTrim!LAST_NAME,V.Local.srecipientsline)
		'begin the recipients
		F.Intrinsic.control.If(V.local.srecipients,<>,"")
			F.Intrinsic.String.Build("{0}*!*{1}",V.Local.srecipientsline,V.Local.srecipients,V.Local.srecipients)
		F.Intrinsic.Control.Else
			V.Local.srecipients.Set(V.Local.srecipientsline)
		F.Intrinsic.Control.EndIf
		'move to the next record
		F.ODBC.con!rst.MoveNext
		Function.Intrinsic.Control.Loop

'	v.uGlobal.uRecip(v.Local.i)!EMAIL.Set(v.ODBC.con!rst.FieldValTrim!EMAIL)

	f.Intrinsic.Control.Else
		V.uGlobal.uRecip(v.Local.i)!VENDOR_ID.Set(V.uGlobal.uVendor(v.Local.i)!Vendor_Name)
	f.Intrinsic.Control.endif	

	F.ODBC.con!rst.Close

	V.uGlobal.uRecip(v.Local.i)!RECIP.Set(V.Local.srecipients)
	v.uGlobal.uRecip(v.Local.i)!EMAIL.Set(v.Local.semail)
	V.Local.srecipients.Set("")
	v.Local.semail.Set("")

F.Intrinsic.Control.Next(V.Local.i)

''call the buildstyle and begin loading it
'F.Intrinsic.Control.CallSub(Buildstyle)

	F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("LoadFlexgrid_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3526_ATG_NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Form2_unload)
Function.Intrinsic.Control.EndIf
Program.Sub.LoadFlexgrid.End

Program.Sub.gsflexgrid1_CommandClick.Start
F.Intrinsic.Control.SetErrorHandler("Modded_EmailNotification_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.skey.Declare(string)
v.Local.svendor.Declare(string)
v.local.i.declare(long)

v.Local.ikey.Declare(long)
v.Local.ikey.Set(v.Args.key)
f.Intrinsic.Math.Sub(v.Local.ikey,1,v.Local.skey)

'v.Local.skey.Set(v.Args.key)

'get the vendor
gui.Form2.gsflexgrid1.GetTextMatrix(0,v.Local.skey,v.Global.sVendorID)
'get the vendor
gui.Form2.gsflexgrid1.GetTextMatrix(0,v.Local.skey,v.Global.sVendor)
'loop through and get the ID
f.Intrinsic.Control.For(v.Local.i,v.uGlobal.uVendor.LBound,v.uGlobal.uVendor.UBound,1)
	f.Intrinsic.Control.If(v.uGlobal.uVendor(v.Local.i)!Vendor_Name,=,v.Global.sVendorID.Trim)
		v.Global.sVendorID.Set(v.uGlobal.uVendor(v.Local.i)!Vendor_ID)
		v.Global.i.Set(v.Local.i)
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Next(v.Local.i)

'call the newly modified Email Notification
f.Intrinsic.Control.CallSub(modded_emailnotification)
'f.Intrinsic.Control.CallSub(emailnotificationsfinal)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Modded_EmailNotification_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3526_ATG_NACHA.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf
Program.Sub.gsflexgrid1_CommandClick.End

Program.Sub.Modded_EmailNotification.Start
F.Intrinsic.Control.SetErrorHandler("Modded_EmailNotification_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.i.Declare(Long)
V.Local.ia.Declare(Long)
V.Local.sText.Declare(String)
V.Local.sReplyEmail.Declare(String)
V.Local.sSql.Declare(String)
V.Local.sEmail.Declare(String)
V.Local.bChk.Declare(Boolean)

'new variables declared by WAW
V.Local.sdate.Declare(String)
V.Local.scompany.Declare(String)
V.Local.scheckline.Declare(String)
V.Local.iinvoicecount.Declare(Long)
V.Local.sinvoices.Declare(String)
V.Local.spayline.Declare(String)
V.Local.sinvoiceline.Declare(String)
V.Local.iinvoicecount2.Declare(Long)
V.Local.sSql2.Declare(String)
V.Local.sinvoice.Declare(String)
V.Local.finvoiceamount.Declare(Float)
V.Local.ssql3.Declare(String)
V.Local.scheckno.Declare(String)

F.Intrinsic.Control.If(V.uGlobal.uVendor.UBound,=,-1)
	F.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndIf

'set v.local.i as v.global.i
v.Local.i.Set(v.Global.i)

'F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uVendor!Vendor_ID,V.ODBC.con!rst.FieldValTrim!VENDOR_ID,0,V.uGlobal(v.Local.i)
'F.Intrinsic.Control.For(V.Local.i,V.uGlobal.uVendor.LBound,V.uGlobal.uVendor.UBound,1)
	V.Local.bChk.Set(False)
'	V.Global.sVendorID.Set(V.uGlobal.uVendor(V.Local.i)!Vendor_ID)
	Gui.F_ContactList.ddlContact.ClearItems
	Gui.F_ContactList.lstEmails.ClearItems
	Gui.F_ContactList.txtEmail.Text("")
	Gui.F_ContactList.txtSubject.Text("")
	Gui.F_ContactList.mltxtBody.Text("")
	F.Intrinsic.Control.CallSub(modded_popcontacts)
	Gui.F_ContactList.txtSubject.Text("ACH Payment Notification")

	'set the date line
	F.Intrinsic.String.Build("{0}{1}{2}","Payment Issue Date:",V.Ambient.Tab,V.ambient.date,V.Local.sdate)
	'set the company line
	F.Intrinsic.String.Build("{0}{1}","Company: ",V.uglobal.uVendor(v.local.i)!Vendor_Name,V.Local.scompany)
	'split the invoices
	F.Intrinsic.String.Split(V.uGlobal.uVendor(v.Local.i)!Invoices,",",V.Local.sinvoices)

	V.Local.scheckno.Set(V.uGlobal.uVendor(v.Local.i)!KEYNUM)

	'set the ACH transaction ID /Check Number Line
	F.Intrinsic.String.Build("{0}{1}{2}","ACH Transaction ID:",V.Ambient.Tab,V.local.scheckno,V.Local.scheckline)
	'set the pay amount

	V.Global.uPayAmount.Set(V.uGlobal.uVendor(v.Local.i)!Pay_Amount)
	'format the pay amount
	F.Intrinsic.String.Format(V.Global.uPayAmount,"###,##0.00##",V.Global.uPayAmount)

	F.Intrinsic.String.Split(V.uGlobal.uVendor(v.Local.i)!Invoices,",",V.Local.sinvoices)

	F.Intrinsic.Control.For(V.local.iinvoicecount2,V.Local.sinvoices.LBound,V.Local.sinvoices.UBound,1)
		'if there are no invoices move to the next
		F.Intrinsic.Control.If(V.Local.sinvoices(v.local.iinvoicecount2),=,"")
			V.Local.sinvoiceline.Set("No Invoices Found")
			V.Global.uPayAmount.Set(0.00)
		'otherwise build your invoice line			
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("Select NET  from ACH_DTL_INV where INV_NO = '{0}' and VENNO = '{1}' and CHKNO = '{2}'",V.Local.sinvoices(v.Local.iinvoicecount2),V.uGlobal.uVendor(v.Local.i)!Vendor_ID,V.local.scheckno,V.Local.sSql2)
			F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSql2)
			F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,<>,True)
				V.Local.sInvoice.Set(V.local.sinvoices(v.Local.iinvoicecount2))
				V.Local.finvoiceamount.Set(V.ODBC.con!rst.FieldValTrim!NET)
		
				F.Intrinsic.String.Format(V.local.finvoiceamount,"###,##0.00##",V.local.finvoiceamount)

				F.Intrinsic.Control.If(V.Local.sinvoiceline,=,"")
					F.Intrinsic.string.build("{0}{1}{0}{2}{3}",V.ambient.tab,V.local.sinvoices(v.local.iinvoicecount2),"$",V.Local.finvoiceamount,V.local.sinvoiceline)
				F.Intrinsic.Control.Else
					F.Intrinsic.string.build("{0}{1}{2}{3}{2}{4}{5}",V.local.sinvoiceline,V.ambient.newline,V.ambient.tab,V.local.sinvoices(v.local.iinvoicecount2),"$",V.Local.finvoiceamount,V.local.sinvoiceline)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rst.Close
		F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Next(V.local.iinvoicecount2)

	F.Intrinsic.String.Format(V.Global.uPayAmount,"###,##0.00##",V.Global.uPayAmount)

	V.Local.sinvoice.Set("")
	V.Local.finvoiceamount.Set(0)

'	F.Intrinsic.String.Concat("Company: ",V.uGlobal.uVendor(V.Local.i)!Vendor_Name,V.Ambient.NewLine,"Invoices: ",V.uGlobal.uVendor(V.Local.i)!Invoices,V.Ambient.NewLine,"Payment Amount: ",V.uGlobal.uVendor(V.Local.i)!Pay_Amount,V.Local.sText)
	F.Intrinsic.String.Build("{0}{1}{2}{1}{3}{1}{4}{1}{5}{1}{6}{7}",V.Local.scheckline,V.Ambient.NewLine,V.Local.sdate,V.Local.scompany,"Invoices: ",V.Local.sinvoiceline,"Total Payment Amount $",V.Global.uPayAmount,V.Local.sText)

	V.Local.sinvoiceline.Set("")
	Gui.F_ContactList.mltxtBody.Text(V.Local.sText)
	F.Global.Security.GetUserEmail(V.Caller.User,V.Caller.CompanyCode,V.Local.sReplyEmail)
	Gui.F_ContactList.txtReplyEmail.Text(V.Local.sReplyEmail)
	F.Intrinsic.String.Concat("ACH Email Notificiation For ",V.uGlobal.uVendor(V.Local.i)!Vendor_Name,V.Local.sText)
	Gui.F_ContactList..Caption(V.Local.sText)
	V.Global.sList.Redim(-1,-1)
	Gui.F_ContactList..Show

	F.Intrinsic.String.Concat("Select EMAIL from GCG_3526_EACH_Remit where VENDOR = '",V.uGlobal.uVendor(V.Local.i)!Vendor_Name,"'",V.Local.sSql)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSql)
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,<>,True)
		V.Local.sEmail.Set(V.ODBC.con!rst.FieldValTrim!EMAIL)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.If(V.Local.sEmail,<>,"")
		Gui.F_ContactList.lstEmails.AddItem(V.ODBC.con!rst.FieldValTrim!EMAIL)
		'Search for email address in memory array  to avoid duplicates
		F.Intrinsic.Control.For(V.Local.ia,0,V.Global.sList.UBound,1)
			F.Intrinsic.Control.If(V.Local.sEmail,=,V.Global.sList(v.Local.ia))
				V.Local.bChk.Set(True)
				F.Intrinsic.Control.ExitFor(V.Local.ia)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.ia)

		'If email not found in list, add it to memory array
		F.Intrinsic.Control.If(V.Local.bChk,=,False)
			F.Intrinsic.Control.If(V.Global.sList.UBound,=,-1)
				V.Global.sList.Redim(0,0)
			F.Intrinsic.Control.Else
				V.Global.sList.RedimPreserve(1)
			F.Intrinsic.Control.EndIf
			V.Global.sList(v.Global.sList.UBound).Set(V.Local.sEmail)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

	F.ODBC.con!rst.Close
	V.Global.bBusy.Set(True)
	F.Intrinsic.Control.CallSub(Wait)
'F.Intrinsic.Control.Next(V.Local.i)
F.Intrinsic.Control.CallSub(Unload)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Modded_EmailNotification_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3526_ATG_NACHA.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf
Program.Sub.Modded_EmailNotification.End

Program.Sub.Modded_PopContacts.Start
F.Intrinsic.Control.SetErrorHandler("Modded_PopContacts_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

V.Local.sSQL.Declare(String)
V.Local.sTemp.Declare(String)
v.Local.sname.Declare(string)

''Add blank item to drop down list
'Gui.F_ContactList.ddlContact.AddItem("")

'Fill drop down list with contacts/emails for the customer on the order
f.Intrinsic.String.Build("Select Email, LAST_NAME, FIRST_NAME from GCG_3526_EACH_REMIT where VENDOR = '{0}'",v.Global.sVendorID,v.Local.sSQL)


'F.Intrinsic.String.Concat("Select Email, Name_Last, Name_First from GCG_3526_EACH_REMIT where VENDOR='",V.Global.sVendorID,",V.Local.sSQL)
F.ODBC.Connection!con.OpenRecordsetRO("rst",V.Local.sSQL)
F.Intrinsic.Control.DoUntil(V.ODBC.con!rst.EOF,=,True)
	F.Intrinsic.Control.If(V.ODBC.con!rst.FieldValTrim!Email,<>,"")
		f.Intrinsic.String.Build("{0}, {1}",v.ODBC.con!rst.fieldvaltrim!LAST_NAME,v.ODBC.con!rst.fieldvaltrim!FIRST_NAME,v.Local.sname)
		
		F.Intrinsic.string.Concat(V.Local.sname," <",V.ODBC.con!rst.FieldValTrim!Email,">",V.Local.sTemp)
		gui.F_ContactList.lstEmails.AddItem(v.Local.sTemp)
'		Gui.F_ContactList.ddlContact.AddItem(V.Local.sTemp)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rst.MoveNext
F.Intrinsic.Control.Loop
F.ODBC.con!rst.Close 

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Modded_PopContacts_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3526_ATG_NACHA.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf
Program.Sub.Modded_PopContacts.End

Program.Sub.cmdsave_Click.Start
F.Intrinsic.Control.SetErrorHandler("cmdsend_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sEmail.Declare(String)
V.Local.i.Declare(Long)

'Exit if no email selected or enetered
F.Intrinsic.Control.If(V.Screen.F_ContactList!txtReplyEmail.Text,=,"")
	F.Intrinsic.UI.Msgbox("No reply to address entered.","Invalid Email")
	Gui.F_ContactList.txtReplyEmail.SetFocus
	Gui.F_ContactList.txtReplyEmail.SelectAll
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'Checking for valid email
V.Local.sEmail.Set(V.Screen.F_ContactList!txtReplyEmail.Text)
F.Intrinsic.String.Split(V.Local.sEmail.Trim,"@",V.Local.sEmail)
F.Intrinsic.Control.If(V.Local.sEmail.UBound,<>,1)
	F.Intrinsic.UI.Msgbox("Invalid reply to email address.","Invalid Email")
	Gui.F_ContactList.txtReplyEmail.SetFocus
	Gui.F_ContactList.txtReplyEmail.SelectAll
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sEmail(1),".",V.Local.sEmail)
	F.Intrinsic.Control.If(V.Local.sEmail.UBound,<>,1)
		F.Intrinsic.UI.Msgbox("Invalid reply to email address.","Invalid Email")
		Gui.F_ContactList.txtReplyEmail.SetFocus
		Gui.F_ContactList.txtReplyEmail.SelectAll
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'Checking to make sure recipient list isn't blank
F.Intrinsic.Control.If(V.uGlobal.urecip.UBound,=,-1)
	F.Intrinsic.UI.Msgbox("Please enter at least one recipient email.","Invalid Email")
	Gui.F_ContactList.txtEmail.SetFocus
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

f.Intrinsic.Control.If(v.uGlobal.uemail.UBound,>,0)
	v.Local.i.Set(v.uGlobal.uEmail.UBound)
	f.Intrinsic.Math.Add(v.Local.i,1,v.Local.i)
	v.uGlobal.uEmail.RedimPreserve(0,v.Local.i)
	v.uGlobal.uemail(v.local.i)!body.Set(v.Screen.F_ContactList!mltxtBody.Text)
	v.uGlobal.uEmail(v.local.i)!REPLY_EMAIL.Set(v.Screen.F_ContactList!txtReplyEmail.text)
	v.uGlobal.uEmail(v.local.i)!SUBJECT.Set(v.Screen.F_ContactList!txtSubject.text)
	v.uGlobal.uEmail(v.local.i)!VENDOR_ID.Set(v.Global.sVendorID)
f.Intrinsic.Control.Else
	v.uGlobal.uemail.Redim(0,0)
	v.uGlobal.uemail(0)!body.Set(v.Screen.F_ContactList!mltxtBody.Text)
	v.uGlobal.uEmail(0)!REPLY_EMAIL.Set(v.Screen.F_ContactList!txtReplyEmail.text)
	v.uGlobal.uEmail(0)!SUBJECT.Set(v.Screen.F_ContactList!txtSubject.text)
	v.uGlobal.uEmail(0)!VENDOR_ID.Set(v.Global.sVendorID)
f.Intrinsic.Control.endif

Gui.F_ContactList..Visible(False)
'call the buildstyle subroutine
'f.Intrinsic.Control.CallSub(buildstyle)
'
'F.Intrinsic.Control.For(V.Local.i,0,V.Global.sList.UBound,1)
'	F.Global.Messaging.CreateEMMessage(V.Global.sList(V.Local.i),"",V.Screen.F_ContactList!txtReplyEmail.Text,"",V.Screen.F_ContactList!txtSubject.Text,V.Screen.F_ContactList!mltxtBody.Text)
'	F.Intrinsic.UI.Sleep(1)
'F.Intrinsic.Control.Next(V.Local.i)
'V.Global.bBusy.Set(False)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdsend_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: ATG_NACHA.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf
Program.Sub.cmdsave_Click.End

Program.Sub.cmdSend_Click.Start
F.Intrinsic.Control.SetErrorHandler("cmdSend_Click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.i.Declare(long)
v.Local.irows.Declare(long)
v.Local.svalue.Declare(string)
v.Local.iother.Declare(long)
v.Local.i2.declare(long)
v.Local.svendor.Declare(string)
v.Local.blisted.Declare(boolean)
v.Local.sret.Declare(string)
v.Local.sret2.Declare(string)
v.Local.iret2.Declare(long)
v.Local.ssql.Declare(string)

gui.form2..Visible(false)

'f.Intrinsic.Math.Add(v.uGlobal.urecip.UBound,1,v.Local.irows)
'check all the checkboxes
F.Intrinsic.Control.If(v.Screen.Form2!chkAll.Value,=,1)
'	f.Intrinsic.Control.For(v.Local.i,v.uGlobal.uEmail.LBound,v.uGlobal.uEmail.UBound,1)
	f.Intrinsic.Math.Add(v.uGlobal.urecip.UBound,1,v.Local.irows)
	'check all the checkboxes
	f.Intrinsic.Control.For(v.Local.i,1,v.Local.irows,1)
		gui.Form2.gsflexgrid1.GetTextMatrix(0,v.Local.i,v.Local.svendor)
		f.Intrinsic.Variable.UDTMultiSeek(v.uGlobal.uVendor!Vendor_Name,v.Local.svendor.Trim,v.Local.sret)
		f.Intrinsic.Variable.UDTMultiSeek(v.uGlobal.uEmail!VENDOR_ID,v.Global.sVendorID.Trim,v.local.sret2)
		v.Global.sret.Set(v.Local.sret)
		v.Global.sret2.Set(v.Local.sret2)
		f.Intrinsic.Control.If(v.Global.sret2.Trim,=,"")
			f.Intrinsic.String.Split(v.Global.sret,"*!*",v.Global.sret)
			v.Global.sVendorID.Set(v.uGlobal.uVendor(v.Global.sret)!vendor_ID)
			v.Global.iCounter.Set(v.Local.i)
			f.Intrinsic.Control.CallSub(emailnotificationsfinal)
			'loop through and if there is a match send an EM Message
			f.Intrinsic.Control.For(v.Local.i2,v.Global.sret.LBound,v.Global.sret.UBound,1)
				'get the emails for that Vendor
				f.Intrinsic.String.Build("Select EMAIL from GCG_3526_EACH_REMIT where VENDOR = '{0}'",v.Global.sVendorID.Trim,v.Local.ssql)
				F.ODBC.Connection!con.openrecordsetro("rst",V.Local.ssql)
				'for each email found send out a message
				f.Intrinsic.Control.DoUntil(v.ODBC.con!rst.EOF,=,True)
					F.Global.Messaging.CreateEMMessage(v.ODBC.con!rst.FieldValTrim!EMAIL,V.Global.sVendorID,v.Global.sReplyEmail.Trim,"",V.Global.sSubject,V.Global.sBody)
					F.Intrinsic.UI.Sleep(1)	
				F.odbc.Con!rst.MoveNext
				F.Intrinsic.Control.Loop
				f.ODBC.con!rst.Close
			f.Intrinsic.Control.Next(v.Local.i2)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Split(v.global.sret,"*!*",v.global.sret)
			v.Global.sVendorID.Set(v.uGlobal.uVendor(v.Local.sret)!vendor_ID)
			f.Intrinsic.Control.CallSub(emailnotificationsfinal)
			'loop through and if there is a match send an EM Message
			f.Intrinsic.Control.For(v.Local.i2,v.Global.sret.LBound,v.global.sret.UBound,1)
				'get the emails for that Vendor
				f.Intrinsic.String.Build("Select EMAIL from GCG_3526_EACH_REMIT where VENDOR = '{0}'",v.Global.sVendorID.Trim,v.Local.ssql)
				F.ODBC.Connection!con.openrecordsetro("rst",V.Local.ssql)
				'for each email found send out a message
				f.Intrinsic.Control.DoUntil(v.ODBC.con!rst.EOF,=,True)
					F.Global.Messaging.CreateEMMessage(v.ODBC.con!rst.FieldValTrim!EMAIL,V.Global.sVendorID,v.Global.sReplyEmail.Trim,"",V.Global.sSubject,V.Global.sBody)
					F.Intrinsic.UI.Sleep(1)	
				F.odbc.Con!rst.MoveNext
				F.Intrinsic.Control.Loop
				f.ODBC.con!rst.Close
			f.Intrinsic.Control.Next(v.Local.i2)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
		
f.Intrinsic.Control.Else
	f.Intrinsic.Math.Add(v.uGlobal.urecip.UBound,1,v.Local.irows)
	'check all the checkboxes
	f.Intrinsic.Control.For(v.Local.i,1,v.Local.irows,1)
		gui.Form2.gsflexgrid1.GetTextMatrix(2,v.Local.i,v.Local.svalue)		
		'if they are marked as send, notify the vendor
		f.Intrinsic.Control.If(v.Local.svalue,=,1)
			gui.Form2.gsflexgrid1.GetTextMatrix(0,v.Local.i,v.Local.svendor)
			v.Global.iCounter.Set(v.Local.i)
			f.Intrinsic.Variable.UDTMultiSeek(v.uGlobal.uVendor!Vendor_Name,v.Local.svendor.Trim,v.Local.sret)
			f.Intrinsic.Variable.UDTMultiSeek(v.uGlobal.uEmail!VENDOR_ID,v.Global.sVendorID.Trim,v.local.sret2)
			v.Global.sret.Set(v.Local.sret)
			v.Global.sret2.Set(v.Local.sret2)
			f.Intrinsic.Control.If(v.Global.sret2.Trim,=,"")
				f.Intrinsic.String.Split(v.Global.sret,"*!*",v.Global.sret)
				v.Global.sVendorID.Set(v.uGlobal.uVendor(v.Global.sret)!vendor_ID)
				f.Intrinsic.Control.CallSub(emailnotificationsfinal)
				'loop through and if there is a match send an EM Message
				f.Intrinsic.Control.For(v.Local.i2,v.Global.sret.LBound,v.Global.sret.UBound,1)
					'get the emails for that Vendor
					f.Intrinsic.String.Build("Select EMAIL from GCG_3526_EACH_REMIT where VENDOR = '{0}'",v.Global.sVendorID.Trim,v.Local.ssql)
					F.ODBC.Connection!con.openrecordsetro("rst",V.Local.ssql)
					'for each email found send out a message
					f.Intrinsic.Control.DoUntil(v.ODBC.con!rst.EOF,=,True)
						F.Global.Messaging.CreateEMMessage(v.ODBC.con!rst.FieldValTrim!EMAIL,V.Global.sVendorID,v.Global.sReplyEmail.Trim,"",V.Global.sSubject,V.Global.sBody)
						F.Intrinsic.UI.Sleep(1)	
					F.odbc.Con!rst.MoveNext
					F.Intrinsic.Control.Loop
					f.ODBC.con!rst.Close
				f.Intrinsic.Control.Next(v.Local.i2)
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Split(v.global.sret,"*!*",v.global.sret)
				v.Global.sVendorID.Set(v.uGlobal.uVendor(v.Local.sret)!vendor_ID)
				f.Intrinsic.Control.CallSub(emailnotificationsfinal)
				'loop through and if there is a match send an EM Message
				f.Intrinsic.Control.For(v.Local.i2,v.Global.sret.LBound,v.global.sret.UBound,1)
					'get the emails for that Vendor
					f.Intrinsic.String.Build("Select EMAIL from GCG_3526_EACH_REMIT where VENDOR = '{0}'",v.Global.sVendorID.Trim,v.Local.ssql)
					F.ODBC.Connection!con.openrecordsetro("rst",V.Local.ssql)
					'for each email found send out a message
					f.Intrinsic.Control.DoUntil(v.ODBC.con!rst.EOF,=,True)
					F.Global.Messaging.CreateEMMessage(v.ODBC.con!rst.FieldValTrim!EMAIL,V.Global.sVendorID,v.Global.sReplyEmail.Trim,"",V.Global.sSubject,V.Global.sBody)
					F.Intrinsic.UI.Sleep(1)	
					F.odbc.Con!rst.MoveNext
					F.Intrinsic.Control.Loop
					f.ODBC.con!rst.Close
				f.Intrinsic.Control.Next(v.Local.i2)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.endif	
	f.Intrinsic.Control.Next(v.Local.i)
f.Intrinsic.Control.EndIf

'close the forms and the program
gui.Form2..Visible(false)
f.Intrinsic.Control.CallSub(unload)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdSend_Click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3526_ATG_NACHA.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf
Program.Sub.cmdSend_Click.End

Program.Sub.EmailNotificationsFinal.Start
F.Intrinsic.Control.SetErrorHandler("EmailNotificationsFinal_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

V.Local.i.Declare(Long)
V.Local.ia.Declare(Long)
V.Local.sText.Declare(String)
V.Local.sReplyEmail.Declare(String)
V.Local.sSql.Declare(String)
V.Local.sEmail.Declare(String)
V.Local.bChk.Declare(Boolean)

'new variables declared by WAW
V.Local.sdate.Declare(String)
V.Local.scompany.Declare(String)
V.Local.scheckline.Declare(String)
V.Local.iinvoicecount.Declare(Long)
V.Local.sinvoices.Declare(String)
V.Local.spayline.Declare(String)
V.Local.sinvoiceline.Declare(String)
V.Local.iinvoicecount2.Declare(Long)
V.Local.sSql2.Declare(String)
V.Local.sinvoice.Declare(String)
V.Local.finvoiceamount.Declare(Float)
V.Local.ssql3.Declare(String)
V.Local.scheckno.Declare(String)
v.Local.iloop.Declare(long)
v.Local.iord.Declare(long)

F.Intrinsic.Control.If(V.uGlobal.uVendor.UBound,=,-1)
	F.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndIf

	V.Local.bChk.Set(False)
	V.Global.sVendorID.Set(V.Global.sVendorID)
	
	Gui.F_ContactList.ddlContact.ClearItems
	Gui.F_ContactList.lstEmails.ClearItems
	Gui.F_ContactList.txtEmail.Text("")
	Gui.F_ContactList.txtSubject.Text("")
	Gui.F_ContactList.mltxtBody.Text("")
'	F.Intrinsic.Control.CallSub(Popcontacts)
'	v.Global.sSubject.
	Gui.F_ContactList.txtSubject.Text("ACH Payment Notification")
	v.Global.sSubject.Set(v.Screen.F_ContactList!txtSubject.text)
	
	f.Intrinsic.Control.If(v.Global.iCounter,>,0)
		f.Intrinsic.Math.Sub(v.global.icounter,1,v.global.icounter)
	f.Intrinsic.Control.endif
	v.Local.i.Set(v.Global.iCounter)
	
	'set the date line
	F.Intrinsic.String.Build("{0}{1}{2}","Payment Issue Date:",V.Ambient.Tab,V.ambient.date,V.Local.sdate)
	'set the company line
	F.Intrinsic.String.Build("{0}{1}","Company: ",V.uglobal.uVendor(v.local.i)!Vendor_Name,V.Local.scompany)
	'split the invoices
	F.Intrinsic.String.Split(V.uGlobal.uVendor(v.Local.i)!Invoices,",",V.Local.sinvoices)

'	F.Intrinsic.String.Build("Select KEY_NUM from ACH_PAYMENT where VENDOR_ID = '{0}' and CHECK_AMT = '{1}'",V.uGlobal.uVendor(v.Local.i)!Vendor_ID,V.uGlobal.uVendor(v.Local.i)!Pay_Amount,V.Local.ssql3)
'	F.ODBC.Connection!con.OpenLocalRecordsetRO("rst2",V.local.ssql3)
'	F.Intrinsic.Control.If(V.ODBC.con!rst2.EOF,<>,True)
'		V.Local.scheckno.Set(V.ODBC.con!rst2.FieldValTrim!KEY_NUM)
'	F.Intrinsic.Control.Else
'		V.Local.scheckno.Set("")
'	F.Intrinsic.Control.EndIf
'	F.ODBC.con!rst2.Close

	V.Local.scheckno.Set(V.uGlobal.uVendor(v.Local.i)!KEYNUM)

	'set the ACH transaction ID /Check Number Line
	F.Intrinsic.String.Build("{0}{1}{2}","ACH Transaction ID:",V.Ambient.Tab,V.local.scheckno,V.Local.scheckline)
	'set the pay amount

	V.Global.uPayAmount.Set(V.uGlobal.uVendor(v.Local.i)!Pay_Amount)
	'format the pay amount
	F.Intrinsic.String.Format(V.Global.uPayAmount,"###,##0.00##",V.Global.uPayAmount)

	F.Intrinsic.String.Split(V.uGlobal.uVendor(v.Local.i)!Invoices,",",V.Local.sinvoices)

	F.Intrinsic.Control.For(V.local.iinvoicecount2,V.Local.sinvoices.LBound,V.Local.sinvoices.UBound,1)
		'if there are no invoices move to the next
		F.Intrinsic.Control.If(V.Local.sinvoices(v.local.iinvoicecount2),=,"")
			V.Local.sinvoiceline.Set("No Invoices Found")
			V.Global.uPayAmount.Set(0.00)
		'otherwise build your invoice line			
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("Select NET  from ACH_DTL_INV where INV_NO = '{0}' and VENNO = '{1}' and CHKNO = '{2}'",V.Local.sinvoices(v.Local.iinvoicecount2),V.uGlobal.uVendor(v.Local.i)!Vendor_ID,V.local.scheckno,V.Local.sSql2)
			F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSql2)
			F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,<>,True)
				V.Local.sInvoice.Set(V.local.sinvoices(v.Local.iinvoicecount2))
				V.Local.finvoiceamount.Set(V.ODBC.con!rst.FieldValTrim!NET)
		
				F.Intrinsic.String.Format(V.local.finvoiceamount,"###,##0.00##",V.local.finvoiceamount)

				F.Intrinsic.Control.If(V.Local.sinvoiceline,=,"")
					F.Intrinsic.string.build("{0}{1}{0}{2}{3}",V.ambient.tab,V.local.sinvoices(v.local.iinvoicecount2),"$",V.Local.finvoiceamount,V.local.sinvoiceline)
				F.Intrinsic.Control.Else
					F.Intrinsic.string.build("{0}{1}{2}{3}{2}{4}{5}",V.local.sinvoiceline,V.ambient.newline,V.ambient.tab,V.local.sinvoices(v.local.iinvoicecount2),"$",V.Local.finvoiceamount,V.local.sinvoiceline)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rst.Close
		F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Next(V.local.iinvoicecount2)

	F.Intrinsic.String.Format(V.Global.uPayAmount,"###,##0.00##",V.Global.uPayAmount)

	V.Local.sinvoice.Set("")
	V.Local.finvoiceamount.Set(0)

'	F.Intrinsic.String.Concat("Company: ",V.uGlobal.uVendor(V.Local.i)!Vendor_Name,V.Ambient.NewLine,"Invoices: ",V.uGlobal.uVendor(V.Local.i)!Invoices,V.Ambient.NewLine,"Payment Amount: ",V.uGlobal.uVendor(V.Local.i)!Pay_Amount,V.Local.sText)
	F.Intrinsic.String.Build("{0}{1}{2}{1}{3}{1}{4}{1}{5}{1}{6}{7}",V.Local.scheckline,V.Ambient.NewLine,V.Local.sdate,V.Local.scompany,"Invoices: ",V.Local.sinvoiceline,"Total Payment Amount $",V.Global.uPayAmount,V.Local.sText)

	V.Local.sinvoiceline.Set("")

	Gui.F_ContactList.mltxtBody.Text(V.Local.sText)
	'set the body
	v.Global.sBody.Set(v.Local.sText)
	
	F.Global.Security.GetUserEmail(V.Caller.User,V.Caller.CompanyCode,V.Local.sReplyEmail)
	
	'set the reply email
	v.Global.sreplyemail.set(v.local.sreplyEmail)

	Gui.F_ContactList.txtReplyEmail.Text(V.Local.sReplyEmail)
	F.Intrinsic.String.Concat("ACH Email Notificiation For ",V.uGlobal.uVendor(V.Local.i)!Vendor_Name,V.Local.sText)
	Gui.F_ContactList..Caption(V.Local.sText)
	V.Global.sList.Redim(-1,-1)
'	Gui.F_ContactList..Show

	F.Intrinsic.String.Concat("Select EMAIL from V_VENDOR_ADDL where VENDOR = '",V.uGlobal.uVendor(V.Local.i)!Vendor_ID.Trim,"'",V.Local.sSql)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSql)
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,<>,True)
		V.Local.sEmail.Set(V.ODBC.con!rst.FieldValTrim!EMAIL)
	F.Intrinsic.Control.EndIf
	'set the vendor email
	v.Global.semail.set(v.local.semail)

	F.Intrinsic.Control.If(V.Local.sEmail,<>,"")
		Gui.F_ContactList.lstEmails.AddItem(V.ODBC.con!rst.FieldValTrim!EMAIL)
		'Search for email address in memory array  to avoid duplicates
		F.Intrinsic.Control.For(V.Local.ia,0,V.Global.sList.UBound,1)
			F.Intrinsic.Control.If(V.Local.sEmail,=,V.Global.sList(v.Local.ia))
				V.Local.bChk.Set(True)
				F.Intrinsic.Control.ExitFor(V.Local.ia)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.ia)

		'If email not found in list, add it to memory array
		F.Intrinsic.Control.If(V.Local.bChk,=,False)
			F.Intrinsic.Control.If(V.Global.sList.UBound,=,-1)
				V.Global.sList.Redim(0,0)
			F.Intrinsic.Control.Else
				V.Global.sList.RedimPreserve(1)
			F.Intrinsic.Control.EndIf
			V.Global.sList(v.Global.sList.UBound).Set(V.Local.sEmail)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

	F.ODBC.con!rst.Close
'	V.Global.bBusy.Set(True)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("EmailNotificationsFinal_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3526_ATG_NACHA.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf
Program.Sub.EmailNotificationsFinal.End

Program.Sub.Comments.Start
${$0$}$NACHA$}$MLA$}$1/26/2012$}$False
${$3$}$0$}$$}$-1$}$-1$}$$}$1/1/1900$}$Original customer was SMS Millcraft.

This is a re-write of the original script due to many inconsistencies with the original.
Program.Sub.Comments.End
